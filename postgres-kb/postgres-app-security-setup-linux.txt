=============================================
POSTGRES SECURITY SETUP FOR APPLICATIONS
=============================================
https://www.postgresql.org/docs/9.5/static/sql-grant.html

=======================
SETUP LISTEN ADDRESSES
=======================

- Edit postgres.conf in the 'data' directory: /var/lib/pgsql/9.5/data/postgres.conf

# Give the localhost, loopback address and other hostnames and ip addresses of the postgres server
listen_addresses = 'localhost,127.0.0.1,pgserver0001'
#listen_addresses = '*'
#listen_addresses = 'localhost'         # what IP address(es) to listen on;
                                        # comma-separated list of addresses;
                                        # defaults to 'localhost'; use '*' for all
                                        # (change requires restart)

- Restart postgres
# systemctl stop postgresql-9.5
# systemctl start postgresql-9.5

===============================
HOST BASED ACCESS CONFIGURATION
===============================
https://www.postgresql.org/docs/9.5/static/auth-pg-hba-conf.html
http://dba.stackexchange.com/questions/83984/connect-to-postgresql-server-fatal-no-pg-hba-conf-entry-for-host

- Edit pg_hba.conf in 'data' directory

- Format:
# local      DATABASE  USER  METHOD  [OPTIONS]
# host       DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
# hostssl    DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
# hostnossl  DATABASE  USER  ADDRESS  METHOD  [OPTIONS]

- Default (as installed):
# TYPE  DATABASE        USER            ADDRESS                 METHOD

# "local" is for Unix domain socket connections only
local   all             all                                     peer
# IPv4 local connections:
host    all             all             127.0.0.1/32            ident
# IPv6 local connections:
host    all             all             ::1/128                 ident
# Allow replication connections from localhost, by a user with the
# replication privilege.
#local   replication     postgres                                peer
#host    replication     postgres        127.0.0.1/32            ident
#host    replication     postgres        ::1/128                 ident

- Example:  To enable logons using passwords which are md5 encrypted 
            (if you use 'password' instead of 'md5', passwords will be in plain text)
            
# "local" is for Unix domain socket connections only
local   all             all                                     peer
# IPv4 local connections:
#host    all             all             127.0.0.1/32            ident --> Comment this out (original line)
host    all             all             127.0.0.1/32            md5 --> add this line
host    all             all             pgserver0001            md5 --> add this line (is this necessary as its IP below covers it)
host    all             all             10.63.166.33/0          md5 --> add this line 
                                                                        (it should be IP-not host mostly, 24/32/0 is also needed)
- Restart postgres service

- Check connection
NOTE: Creating user like 'appuser' is described elsewhere 
NOTE: IP entry for pgserver0001 should be there in pg_hba.conf

$  psql -U appuser -d mydb -h pgserver0001 -W
Password for user appuser:
psql (9.5.3)
Type "help" for help.

mydb=>


=======================
LIST CURRENT USERS
=======================

Login as 'postgres' unix user

-- Start postgres client 'psql'
$ psql

-- List without logging on to a DB
postgres=#  \du
                                   List of roles
 Role name |                         Attributes                         | Member of
-----------+------------------------------------------------------------+-----------
 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}

-- Choose a DB and list the users
postgres=# \c mydb
You are now connected to database "mydb" as user "postgres".

mydb=# \du
                                   List of roles
 Role name |                         Attributes                         | Member of
-----------+------------------------------------------------------------+-----------
 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}

=================================
CREATE A SET OF USERS FOR AN APP
- Superuser/dba, app user etc
=================================

mydb=# create role dbarole;
CREATE ROLE
mydb=# create user dbauser;
CREATE ROLE
mydb=# create user appuser;
CREATE ROLE
mydb=# \password dbauser
Enter new password:
Enter it again:

mydb-# \password appuser
Enter new password:
Enter it again:
mydb-# \du
                                   List of roles
 Role name |                         Attributes                         | Member of
-----------+------------------------------------------------------------+-----------
 appuser   |                                                            | {}
 dbarole   | Cannot login                                               | {}
 dbauser   |                                                            | {}
 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}

postgres=# alter user dbauser with superuser;
ALTER ROLE

postgres=# \du
                                   List of roles
 Role name |                         Attributes                         | Member of
-----------+------------------------------------------------------------+-----------
 appuser   |                                                            | {}
 dbarole   | Cannot login                                               | {}
 dbauser   | Superuser                                                  | {}
 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}
 superuser | Cannot login                                               | {}

- Give and revoke superuser to/from 'appuser'
postgres=# alter user appuser with superuser;
ALTER ROLE
postgres=# \du
                                   List of roles
 Role name |                         Attributes                         | Member of
-----------+------------------------------------------------------------+-----------
 appuser   | Superuser                                                  | {}
 dbarole   | Cannot login                                               | {}
 dbauser   | Superuser                                                  | {}
 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}
 superuser | Cannot login                                               | {}

postgres=# alter user appuser with nosuperuser;
ALTER ROLE
postgres=# \du
                                   List of roles
 Role name |                         Attributes                         | Member of
-----------+------------------------------------------------------------+-----------
 appuser   |                                                            | {}
 dbarole   | Cannot login                                               | {}
 dbauser   | Superuser                                                  | {}
 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}
 superuser | Cannot login                                               | {}

- Give superuser role to 'appuser' through a role like 'dbarole'
postgres=# alter role dbarole with superuser;
ALTER ROLE
postgres=# \du
                                   List of roles
 Role name |                         Attributes                         | Member of
-----------+------------------------------------------------------------+-----------
 appuser   |                                                            | {}
 dbarole   | Superuser, Cannot login                                    | {}
 dbauser   | Superuser                                                  | {}
 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}
 superuser | Cannot login                                               | {}

postgres=# grant dbarole to appuser;
GRANT ROLE
postgres=# \du
                                   List of roles
 Role name |                         Attributes                         | Member of
-----------+------------------------------------------------------------+-----------
 appuser   |                                                            | {dbarole}
 dbarole   | Superuser, Cannot login                                    | {}
 dbauser   | Superuser                                                  | {}
 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}
 superuser | Cannot login                                               | {}

- Revoke a manually given manually created role (not built-in roles like Superuser)
postgres=# revoke dbarole from appuser;
REVOKE ROLE
postgres=# \du
                                   List of roles
 Role name |                         Attributes                         | Member of
-----------+------------------------------------------------------------+-----------
 appuser   |                                                            | {}
 dbarole   | Superuser, Cannot login                                    | {}
 dbauser   | Superuser                                                  | {}
 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}
 superuser | Cannot login                                               | {}

- Create DB privilege
postgres=# alter user appuser with createdb;
ALTER ROLE
postgres=# \du
                                   List of roles
 Role name |                         Attributes                         | Member of
-----------+------------------------------------------------------------+-----------
 appuser   | Create DB                                                  | {}
 dbarole   | Superuser, Cannot login                                    | {}
 dbauser   | Superuser                                                  | {}
 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}
 superuser | Cannot login                                               | {}

postgres=# alter user appuser with nocreatedb;
ALTER ROLE
postgres=# \du
                                   List of roles
 Role name |                         Attributes                         | Member of
-----------+------------------------------------------------------------+-----------
 appuser   |                                                            | {}
 dbarole   | Superuser, Cannot login                                    | {}
 dbauser   | Superuser                                                  | {}
 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}
 superuser | Cannot login                                               | {}

postgres=#

==================================
STANDARD DESIGN FOR AN APPLICATION
==================================
------------------------------
USER DESIGN
------------------------------
For a standard application setup:
appdba   - can create databases, roles, create tablespaces
appdev   - can use databases and create tables, create stored procedures on those db's/tables
appuser  - can use databases and do DML on tables, execute stored procedures
postgres - internal Superuser will stay as is

postgres=# create user appdba;
CREATE ROLE
postgres=# create user appdev;
CREATE ROLE
postgres=# create user appuser;
CREATE ROLE

postgres=# \password appdba
Enter new password:
Enter it again:
postgres=# \password appdev
Enter new password:
Enter it again:
postgres=# \password appuser
Enter new password:
Enter it again:

postgres=# \du
                                   List of roles
 Role name |                         Attributes                         | Member of
-----------+------------------------------------------------------------+-----------
 appdba    |                                                            | {}
 appdev    |                                                            | {}
 appuser   |                                                            | {}
 dbarole   | Superuser, Cannot login                                    | {}
 dbauser   | Superuser                                                  | {}
 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}
 
- Grants to APPDBA
postgres=# alter user appdba with createdb;
ALTER ROLE
postgres=# alter user appdba with createrole;
ALTER ROLE

 postgres=# \du
                                   List of roles
 Role name |                         Attributes                         | Member of
-----------+------------------------------------------------------------+-----------
 appdba    | Create role, Create DB                                     | {}
 appdev    |                                                            | {}
 appuser   |                                                            | {}
 dbarole   | Superuser, Cannot login                                    | {}
 dbauser   | Superuser                                                  | {}
 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}

- Grants to APPDEV (TBD)
This will have specific access to DB's to create tables, stored procs and give grants to APPUSER on those objects

- Grants to APPUSER (TBD)

------------------------------
HBA
------------------------------
pg_hba.conf setting as done before should be sufficient.

========================================================================
CREATE DATABASES, OBJECTS AND PROVIDE ACCESS TO THEM
========================================================================
https://www.postgresql.org/docs/9.5/static/sql-grant.html
http://stackoverflow.com/questions/15867175/postgresql-db-user-should-only-be-allowed-to-call-functions
http://dba.stackexchange.com/questions/69428/how-to-grant-drop-table-function-privileges-to-a-role-in-postgresql?rq=1

SETUP INFO:
appdba   - can create databases, roles, create tablespaces
appdev   - can use databases and create tables, create stored procedures on those db's/tables
appuser  - can use databases and do DML on tables, execute stored procedures

-------------------------------------
CREATE DB AND OBJECTS AS APPDBA
-------------------------------------
- Logon as APPDBA
$ psql -U appdba -d postgres -h pgserver0001 -W
postgres=>  (note that there is no # symbol in this prompt because appdba is not a superuser)

-- Create a database for the app
postgres=> create database appdb;
CREATE DATABASE

-- Create a table
postgres=> \c appdb

appdb=> create table emp (id int, name varchar(10));

      appdb=> \d
             List of relations
       Schema | Name | Type  | Owner
      --------+------+-------+--------
       public | emp  | table | appdba
      (1 row)
      
      appdb=> \d emp
                   Table "public.emp"
       Column |         Type          | Modifiers
      --------+-----------------------+-----------
       id     | integer               |
       name   | character varying(10) |

-- Give grants on the table to other users of the application
appdb=> grant select, insert, update, delete, truncate on emp to appuser;
GRANT

appdb=> grant select, insert, update, delete, truncate on emp to appdev;
GRANT

appdb=> grant trigger on emp to appdev;
GRANT

-- Create schemas
Connect to database 'appdb' as 'appdba' user

appdb=> create schema appdbschema1;
CREATE SCHEMA
appdb=> create schema appdbschema2;
CREATE SCHEMA

appdb=> \dn
     List of schemas
     Name     |  Owner
--------------+----------
 appdbschema1 | appdba
 appdbschema2 | appdba
 public       | postgres
(3 rows)

appdb=> \dt
         List of relations
 Schema |  Name  | Type  |  Owner
--------+--------+-------+----------
 public | city   | table | postgres
 public | dept   | table | appdba
 public | emp    | table | appdba
 public | salary | table | appuser
(4 rows)

-- Try dropping a table not owned by the current user
Logon as 'appdba' to database 'appdb'

appdb=> drop table salary;
ERROR:  must be owner of relation salary

-- Create a new table in a non-public schema

appdb=> create table appdbschema1.emp (id int, name varchar(10));
CREATE TABLE

NOTE: However, \dt lists only public schema tables
appdb=> \dt
         List of relations
 Schema |  Name  | Type  |  Owner
--------+--------+-------+----------
 public | city   | table | postgres
 public | dept   | table | appdba
 public | emp    | table | appdba
 public | salary | table | appuser
(4 rows)




- - - - - - 
-- CAUTION - do not give the privileges like the following.  
             That will lead to messy ownership of objects by too many users.
             Such grant will enable 'appuser' also create tables and other objects in the database.
postgres=# grant all on database appdb to appuser;
GRANT
- - - - - - 


-- Install a procedural language 
https://www.postgresql.org/docs/9.5/static/xplang.html
  Using createlang - https://www.postgresql.org/docs/9.5/static/xplang-install.html 
  Using CREATE LANGUAGE - https://www.postgresql.org/docs/9.5/static/sql-createlanguage.html
  Using CREATE EXTENSION - https://www.postgresql.org/docs/9.5/static/sql-createextension.html
https://tickets.puppetlabs.com/browse/MODULES-1127

-- Create a stored procedure
http://www.postgresqltutorial.com/introduction-to-postgresql-stored-procedures/
http://www.postgresqltutorial.com/introduction-to-postgresql-stored-procedures/

-- Create a function
http://www.tutorialspoint.com/postgresql/postgresql_functions.htm


