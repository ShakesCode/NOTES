=============================================
POSTGRES SECURITY SETUP
=============================================

=======================
SETUP LISTEN ADDRESSES
=======================

- Edit postgres.conf in the 'data' directory: /var/lib/pgsql/9.5/data/postgres.conf

# Give the localhost, loopback address and other hostnames and ip addresses of the postgres server
listen_addresses = 'localhost,127.0.0.1,pgserver0001'
#listen_addresses = '*'
#listen_addresses = 'localhost'         # what IP address(es) to listen on;
                                        # comma-separated list of addresses;
                                        # defaults to 'localhost'; use '*' for all
                                        # (change requires restart)

- Restart postgres
# systemctl stop postgresql-9.5
# systemctl start postgresql-9.5

===============================
HOST BASED ACCESS CONFIGURATION
===============================
https://www.postgresql.org/docs/9.5/static/auth-pg-hba-conf.html
http://dba.stackexchange.com/questions/83984/connect-to-postgresql-server-fatal-no-pg-hba-conf-entry-for-host

- Edit pg_hba.conf in 'data' directory

- Format:
# local      DATABASE  USER  METHOD  [OPTIONS]
# host       DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
# hostssl    DATABASE  USER  ADDRESS  METHOD  [OPTIONS]
# hostnossl  DATABASE  USER  ADDRESS  METHOD  [OPTIONS]

- Default (as installed):
# TYPE  DATABASE        USER            ADDRESS                 METHOD

# "local" is for Unix domain socket connections only
local   all             all                                     peer
# IPv4 local connections:
host    all             all             127.0.0.1/32            ident
# IPv6 local connections:
host    all             all             ::1/128                 ident
# Allow replication connections from localhost, by a user with the
# replication privilege.
#local   replication     postgres                                peer
#host    replication     postgres        127.0.0.1/32            ident
#host    replication     postgres        ::1/128                 ident

- Example:  To enable logons using passwords which are md5 encrypted 
            (if you use 'password' instead of 'md5', passwords will be in plain text)
            
# "local" is for Unix domain socket connections only
local   all             all                                     peer
# IPv4 local connections:
#host    all             all             127.0.0.1/32            ident --> Comment this out (original line)
host    all             all             127.0.0.1/32            md5 --> add this line
host    all             all             pgserver0001            md5 --> add this line (is this necessary as its IP below covers it)
host    all             all             10.63.166.33/0          md5 --> add this line 
                                                                        (it should be IP-not host mostly, 24/32/0 is also needed)
- Restart postgres service

- Check connection
NOTE: Creating user like 'appuser' is described elsewhere 
NOTE: IP entry for pgserver0001 should be there in pg_hba.conf

$  psql -U appuser -d mydb -h pgserver0001 -W
Password for user appuser:
psql (9.5.3)
Type "help" for help.

mydb=>


=======================
LIST CURRENT USERS
=======================

Login as 'postgres' unix user

-- Start postgres client 'psql'
$ psql

-- List without logging on to a DB
postgres=#  \du
                                   List of roles
 Role name |                         Attributes                         | Member of
-----------+------------------------------------------------------------+-----------
 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}

-- Choose a DB and list the users
postgres=# \c mydb
You are now connected to database "mydb" as user "postgres".

mydb=# \du
                                   List of roles
 Role name |                         Attributes                         | Member of
-----------+------------------------------------------------------------+-----------
 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}

=================================
CREATE A SET OF USERS FOR AN APP
- Superuser/dba, app user etc
=================================

mydb=# create role dbarole;
CREATE ROLE
mydb=# create user dbauser;
CREATE ROLE
mydb=# create user appuser;
CREATE ROLE
mydb=# \password dbauser
Enter new password:
Enter it again:

mydb-# \password appuser
Enter new password:
Enter it again:
mydb-# \du
                                   List of roles
 Role name |                         Attributes                         | Member of
-----------+------------------------------------------------------------+-----------
 appuser   |                                                            | {}
 dbarole   | Cannot login                                               | {}
 dbauser   |                                                            | {}
 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}

postgres=# alter user dbauser with superuser;
ALTER ROLE

postgres=# \du
                                   List of roles
 Role name |                         Attributes                         | Member of
-----------+------------------------------------------------------------+-----------
 appuser   |                                                            | {}
 dbarole   | Cannot login                                               | {}
 dbauser   | Superuser                                                  | {}
 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}
 superuser | Cannot login                                               | {}

- Give and revoke superuser to/from 'appuser'
postgres=# alter user appuser with superuser;
ALTER ROLE
postgres=# \du
                                   List of roles
 Role name |                         Attributes                         | Member of
-----------+------------------------------------------------------------+-----------
 appuser   | Superuser                                                  | {}
 dbarole   | Cannot login                                               | {}
 dbauser   | Superuser                                                  | {}
 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}
 superuser | Cannot login                                               | {}

postgres=# alter user appuser with nosuperuser;
ALTER ROLE
postgres=# \du
                                   List of roles
 Role name |                         Attributes                         | Member of
-----------+------------------------------------------------------------+-----------
 appuser   |                                                            | {}
 dbarole   | Cannot login                                               | {}
 dbauser   | Superuser                                                  | {}
 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}
 superuser | Cannot login                                               | {}

- Give superuser role to 'appuser' through a role like 'dbarole'
postgres=# alter role dbarole with superuser;
ALTER ROLE
postgres=# \du
                                   List of roles
 Role name |                         Attributes                         | Member of
-----------+------------------------------------------------------------+-----------
 appuser   |                                                            | {}
 dbarole   | Superuser, Cannot login                                    | {}
 dbauser   | Superuser                                                  | {}
 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}
 superuser | Cannot login                                               | {}

postgres=# grant dbarole to appuser;
GRANT ROLE
postgres=# \du
                                   List of roles
 Role name |                         Attributes                         | Member of
-----------+------------------------------------------------------------+-----------
 appuser   |                                                            | {dbarole}
 dbarole   | Superuser, Cannot login                                    | {}
 dbauser   | Superuser                                                  | {}
 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}
 superuser | Cannot login                                               | {}

- Revoke a manually given manually created role (not built-in roles like Superuser)
postgres=# revoke dbarole from appuser;
REVOKE ROLE
postgres=# \du
                                   List of roles
 Role name |                         Attributes                         | Member of
-----------+------------------------------------------------------------+-----------
 appuser   |                                                            | {}
 dbarole   | Superuser, Cannot login                                    | {}
 dbauser   | Superuser                                                  | {}
 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}
 superuser | Cannot login                                               | {}

- Create DB privilege
postgres=# alter user appuser with createdb;
ALTER ROLE
postgres=# \du
                                   List of roles
 Role name |                         Attributes                         | Member of
-----------+------------------------------------------------------------+-----------
 appuser   | Create DB                                                  | {}
 dbarole   | Superuser, Cannot login                                    | {}
 dbauser   | Superuser                                                  | {}
 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}
 superuser | Cannot login                                               | {}

postgres=# alter user appuser with nocreatedb;
ALTER ROLE
postgres=# \du
                                   List of roles
 Role name |                         Attributes                         | Member of
-----------+------------------------------------------------------------+-----------
 appuser   |                                                            | {}
 dbarole   | Superuser, Cannot login                                    | {}
 dbauser   | Superuser                                                  | {}
 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}
 superuser | Cannot login                                               | {}

postgres=#

==================================
STANDARD DESIGN FOR AN APPLICATION
==================================
------------------------------
USER DESIGN
------------------------------
For a standard application setup:
appdev   - can use databases and create tables, create stored procedures on those db's/tables
appuser  - can use databases and do DML on tables, execute stored procedures
appdba   - can create databases, roles, create tablespaces
postgres - internal Superuser will stay as is

postgres=# create user appuser;
CREATE ROLE
postgres=# create user appdev;
CREATE ROLE
postgres=# create user appdba;
CREATE ROLE

postgres=# \password appuser
Enter new password:
Enter it again:
postgres=# \password appdev
Enter new password:
Enter it again:
postgres=# \password appdba
Enter new password:
Enter it again:
postgres=#

postgres=# \du
                                   List of roles
 Role name |                         Attributes                         | Member of
-----------+------------------------------------------------------------+-----------
 appdba    |                                                            | {}
 appdev    |                                                            | {}
 appuser   |                                                            | {}
 dbarole   | Superuser, Cannot login                                    | {}
 dbauser   | Superuser                                                  | {}
 postgres  | Superuser, Create role, Create DB, Replication, Bypass RLS | {}

------------------------------
HBA
------------------------------
