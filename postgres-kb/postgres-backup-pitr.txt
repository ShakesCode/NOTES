=====================================================
              POSTGRES BACKUPS AND PITR
=====================================================
https://www.postgresql.org/docs/9.5/static/backup.html

** https://www.postgresql.org/docs/9.5/static/continuous-archiving.html --> for base, wal backups and pitr
** https://opensourcedbms.com/dbms/how-to-do-point-in-time-recovery-with-postgresql-9-2-pitr-3/ --> good with restore also
** https://www.mkyong.com/database/postgresql-point-in-time-recovery-incremental-backup/ --> with REAL PITR restore

https://www.postgresql.org/docs/9.5/static/wal-internals.html

==================================================
-- NOTE - LOOK FOR EXAMPLE TOWARDS THE END --
==================================================

=========================
WRITE AHEAD LOG - WAL
=========================
https://www.postgresql.org/docs/9.5/static/wal-internals.html

WAL are similar to redologs of Oracle - but NOT round-robin - so, they also act as archivelogs of oracle.
Used for both crash recovery and PITR.

Directory - pg_xlog (like /var/lib/pgsql/9.5/data/pg_xlog)
Size of each 'segment file' - 16 MB (can be changed by altering the --with-wal-segsize configure option when building the server)

  When not using WAL archiving, the system normally creates just a few segment files and then "recycles" them by renaming 
  no-longer-needed segment files to higher segment numbers. It's assumed that segment files whose contents precede the 
  checkpoint-before-last are no longer of interest and can be recycled.

- WARM STANDBY
If we continuously feed the series of WAL files to another machine that has been loaded with the same base backup file, 
we have a warm standby system: at any point we can bring up the second machine and it will have a nearly-current copy of the database.

==========================
BACKUP PRINCIPLE
==========================
Backup all data-files - 'base backup'
Backup WAL files - 'WAL archiving'

==========================
ENABLE WAL
==========================
https://www.postgresql.org/docs/9.5/static/continuous-archiving.html#BACKUP-ARCHIVING-WAL

WAL has to be set up at Postgres startup properly. Otherwise backup errors out:

postgres=# SELECT pg_start_backup('label');
ERROR:  WAL level not sufficient for making an online backup
HINT:  wal_level must be set to "archive", "hot_standby", or "logical" at server start.
    
- Edit data/postgresql.conf and modify as follows 

wal_level=archive
archive_mode=on
archive_command='command to copy wal files to a backup location'

wal_level = archive                    # minimal, archive, hot_standby, or logical
                                       # (change requires restart)

# - Archiving -

archive_mode = on               # enables archiving; off, on, or always
                                # (change requires restart)
                                
archive_command = 'test ! -f /var/lib/pgsql/9.5/backups/wal/%f && cp %p /var/lib/pgsql/9.5/backups/wal/%f'
#archive_command = ''           # command to use to archive a logfile segment
                                # placeholders: %p = path of file to archive
                                #               %f = file name only
                                # e.g. 'test ! -f /mnt/server/archivedir/%f && cp %p /mnt/server/archivedir/%f'

- Restart postgres
# systemctl start postgresql-9.5

- Verify
Go to the directory /var/lib/pgsql/9.5/backups/wal and find older serial number files backed up there.
In the pg_xlog directory, newer serial number files will be present - which will be later backed up.

===========================================
BASE BACKUP - MANUAL METHOD
===========================================

- Mark the instance to be in backup mode (like tablespace/datafile begin backup in oracle)
-bash-4.2$ psql
psql (9.5.3)
Type "help" for help.

postgres=# SELECT pg_start_backup('label');  --> give this or any other label
 pg_start_backup
-----------------
 0/9000028
(1 row)

- Copy the contents of the 'data' directory to somewhere 
NOTE: Use this folder and command or some other method or to-tape commands

$ tar cvf /var/lib/pgsql/9.5/backups/base_backup_<label>.tar data

- Mark the end of backup (like end backup in oracle)
postgres=# SELECT pg_stop_backup();
NOTICE:  pg_stop_backup complete, all required WAL segments have been archived
 pg_stop_backup
----------------
 0/90000C0
(1 row)

=============================
EXAMPLE 1 - backup and pitr
=============================
Initialize a new DB
Enable WAL
Enable WAL archiving
Create a table table1 - note down the time (time 1)
Create a backup
Create another table table2 - note down the time (time 2)
Wait for 10 min - note down the time (time 3)
Create yet another table table3 - note down the time (time 4)
Insert some rows into talbes 1 and 2
Crash the DB
Restore the DB to time 3
You should see only empty table 1 and table 2 - and should not see table3







    



