=======================================
    PARTITIONED TABLES IN POSTGRES
=======================================

https://wiki.postgresql.org/wiki/Table_partitioning
https://www.postgresql.org/docs/9.5/static/ddl-partitioning.html
http://wiki.openbravo.com/wiki/How_to_create_a_Trigger (Triggers explained)
https://www.postgresql.org/docs/9.5/static/plpgsql-trigger.html (triggers)

-- LOGON
Logon as the owner of all these objects
Choose the DB and SCHEMA that will include all these objects

-- CREATE THE MASTER TABLE 

CREATE TABLE sales
(
    saleid         int not null,
    saledate       date not null,
    units          int not null,
    rate           int not null,
    amount         int not null
);

-- CREATE CHILD/PARTITION TABLES WITH CHECK CONSTRAINT
NOTE: DO NOT create check constraints at master table level for partition keys
      (however, master table can contain check constraints that apply to all partitions - example, valid values)
      
CREATE TABLE sales_jan (
    CHECK ( saledate >= DATE '2016-01-01' AND saledate < DATE '2016-02-01' )
) INHERITS (sales);

CREATE TABLE sales_feb (
    CHECK ( saledate >= DATE '2016-02-01' AND saledate < DATE '2016-03-01' )
) INHERITS (sales);

-- CREATE INDEX ON PARTITION KEY COLUMN
NOTE: DO NOT create indexes at master table level

CREATE INDEX sales_jan_saledate ON sales_jan (saledate);
CREATE INDEX sales_feb_saledate ON sales_feb (saledate);

-- CREATE FUNCTION FOR TRIGGER TO USE
appdb=> CREATE OR REPLACE FUNCTION sales_insert_trigger_function ()
RETURNS TRIGGER AS $$
BEGIN
    IF ( NEW.saledate >= DATE '2016-01-01' AND
         NEW.saledate < DATE '2016-02-01' ) THEN
        INSERT INTO sales_jan VALUES (NEW.*);
    ELSIF ( NEW.saledate >= DATE '2016-02-01' AND
            NEW.saledate < DATE '2016-04-01' ) THEN
        INSERT INTO sales_feb VALUES (NEW.*);
    ELSE
        RAISE EXCEPTION 'Insert to sales table - date out of range.  Fix the sales_insert_trigger_function() function';
    END IF;
    RETURN NULL;
END;
$$
LANGUAGE plpgsql;

appdb=> \df
                                     List of functions
 Schema |             Name              | Result data type | Argument data types |  Type
--------+-------------------------------+------------------+---------------------+---------
 public | sales_insert_trigger_function | trigger          |                     | trigger


appdb=> CREATE TRIGGER insert_sales_trigger
        BEFORE INSERT ON sales
        FOR EACH ROW EXECUTE PROCEDURE sales_insert_trigger_function();

-- -----------------------
-- LIST ALL THESE OBJECTS
-- -----------------------

appdb=> \dt
          List of relations
 Schema |   Name    | Type  | Owner
--------+-----------+-------+--------
 public | sales     | table | appdba
 public | sales_feb | table | appdba
 public | sales_jan | table | appdba
 
appdb=> \d+ sales
                         Table "public.sales"
  Column  |  Type   | Modifiers | Storage | Stats target | Description
----------+---------+-----------+---------+--------------+-------------
 saleid   | integer | not null  | plain   |              |
 saledate | date    | not null  | plain   |              |
 units    | integer | not null  | plain   |              |
 rate     | integer | not null  | plain   |              |
 amount   | integer | not null  | plain   |              |
Triggers:
    insert_sales_trigger BEFORE INSERT ON sales FOR EACH ROW EXECUTE PROCEDURE sales_insert_trigger_function()
Child tables: sales_feb,
              sales_jan
              
 
appdb=> \di
                    List of relations
 Schema |        Name        | Type  | Owner  |   Table
--------+--------------------+-------+--------+-----------
 public | sales_feb_saledate | index | appdba | sales_feb
 public | sales_jan_saledate | index | appdba | sales_jan

appdb=> \df
                                     List of functions
 Schema |             Name              | Result data type | Argument data types |  Type
--------+-------------------------------+------------------+---------------------+---------
 public | sales_insert_trigger_function | trigger          |                     | trigger

appdb=> select * from pg_trigger;
 tgrelid |        tgname        | tgfoid | tgtype | tgenabled | tgisinternal | tgconstrrelid | tgconstrindid | tgconstraint | tgdeferrable | tginitdeferred | tgnargs |
tgattr | tgargs | tgqual
---------+----------------------+--------+--------+-----------+--------------+---------------+---------------+--------------+--------------+----------------+---------+-
-------+--------+--------
   16457 | insert_sales_trigger |  16456 |      7 | O         | f            |             0 |             0 |            0 | f            | f              |       0 |
       | \x     |

-- ----------------------
-- INSERT DATA AND VERIFY
-- ----------------------
NOTE: Date format is MM-DD-YYYY for insert, and YYYY-DD

appdb=> insert into sales values (1, '01-01-2016', 1,1,1);
INSERT 0 0
appdb=> select * from sales;
 saleid |  saledate  | units | rate | amount
--------+------------+-------+------+--------
      1 | 2016-01-01 |     1 |    1 |      1
(1 row)

appdb=>  insert into sales values (1, '02-02-2016', 1,1,1);
INSERT 0 0
appdb=> select * from sales;
 saleid |  saledate  | units | rate | amount
--------+------------+-------+------+--------
      1 | 2016-01-01 |     1 |    1 |      1
      1 | 2016-01-04 |     1 |    1 |      1
      1 | 2016-01-02 |     1 |    1 |      1
      1 | 2016-02-02 |     1 |    1 |      1
(4 rows)

appdb=> insert into sales values (1,'02-04-2016', 1,1,1);
INSERT 0 0
appdb=> select * from sales;
 saleid |  saledate  | units | rate | amount
--------+------------+-------+------+--------
      1 | 2016-01-01 |     1 |    1 |      1
      1 | 2016-01-04 |     1 |    1 |      1
      1 | 2016-01-02 |     1 |    1 |      1
      1 | 2016-02-02 |     1 |    1 |      1
      1 | 2016-02-04 |     1 |    1 |      1
(5 rows)

appdb=> insert into sales values (1,'04-02-2016',1,1,1);
ERROR:  Insert to sales table - date out of range.  Fix the sales_insert_trigger_function() function


