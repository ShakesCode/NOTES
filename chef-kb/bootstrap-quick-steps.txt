======================================================
                  BOOTSTRAP QUICK STEPS
======================================================
https://docs.chef.io/knife_bootstrap.html

============================
CERTIFICATE-SSL ISSUES
============================
Cert issue fix: http://jtimberman.housepub.org/blog/2014/12/11/chef-12-fix-untrusted-self-sign-certs/
http://stackoverflow.com/questions/28461282/bootstrapping-chef-nodes-with-custom-ssl-certificate

-------------------------------
CERTIFICATE LOCATIONS
-------------------------------

$ knife ssl check (or other knife command) lists as follows IN THE CASE OF FAILURE

OpenSSL Configuration:
* Version: OpenSSL 1.0.2j  26 Sep 2016
* Certificate file: /opt/chef/embedded/ssl/cert.pem
* Certificate directory: /opt/chef/embedded/ssl/certs
Chef SSL Configuration:
* ssl_ca_path: nil
* ssl_ca_file: nil
* trusted_certs_dir: "/root/chef-repo/.chef/trusted_certs"

-------------------------------
CERTIFICATES - NOT SELF-SIGNED
-------------------------------
If your company's chef server has been set up with a CA certificate, 
then copy/append that certificate to /opt/chef/embedded/ssl/certs/cacert.pem or other filename in that folder on the client node.
Then, make a soft link /opt/chef/embedded/ssl/cert.pem to that file.

-------------------------------
CERTIFICATES - SELF-SIGNED
-------------------------------
If your company's chef server has been set up with a self signed certificate,
then from ~/chef-repo/.chef or other work directory run:
$ knife ssl fetch

That fetches the certificate file to trusted_certs subdirectory under work directory.

-----------------
KNIFE OPTIONS
-----------------
NOTE: Use the option " --node-ssl-verify-mode none " in knife bootstrap if you get SSL certificate/verify errors
      Also, try other options for SSL/cert issues:
      --[no-]host-key-verify to disable host key verification. Default setting: --host-key-verify
      --[no-]node-verify-api-cert

============================
NODE AND CLIENT
============================

Essentially they are named key-pairs to interact with chef-server.
Chef server keeps public key.
Nodes use/keep private key.

CLIENT - is an entity that can access chef server
         /etc/chef/client.pem will be its key
         Create the client.pem file manually for a node and copy to /etc/chef/client.pem
         --> or, do 'bootstrap' to create it

NODE - is a machine that is bootstrapped to chef server
       IT IS ALSO A 'CLIENT' with a client key
       See CLIENT above
              
VALIDATION-CLIENT - this is a keypair that is used to validate initially to the chef organization during bootstrap.
      
      An organization already would have a validator for it - orgname-validator - and its private key is the orgname-validator.pem.
      You can create a custom validator for an organization also (see section in this doc on that)
      
      Usually, it is called validator.pem - to be referenced in knife.rb as follows:
          validation_client_name "orgName-validator"
          validation_key '/etc/chef/orgName-validator.pem
          
      Upon bootstrapping, a client.pem will be created for the client/node - and validator.pem is not required and can be removed.



==================================
VALIDATOR and VALIDATOR.PEM
==================================
https://docs.chef.io/server_manage_clients.html#chef-validator-keys
https://docs.chef.io/chef_private_keys.html

A validator is a 'client' - essentially a key-pair with a name.
It can be created for an organization.
A default validator will be available in the starter kit for the organization - org-validator.pem.
ADDITIONAL validators can be created - in the case org-validator.pem is lost  or cannot be disclosed to all for any reason.

----------------------
CREATE A NEW VALIDATOR
----------------------
Go to your organization in Chef server.
Open the Chef management console.
Click Policy.
Click Clients.
Click Create.
In the Create Client dialog box, enter the name of the chef-validator key.
Select the Validation Client option. Click Create Client.
Copy or download the private key.

-- RESET THE KEY WHEN REQUIRED
To reset a chef-validator key:

Go to your organization in Chef server.
Open the Chef management console.
Click Policy.
Click Clients.
Select a chef-validator key.
Click the Details tab.
Click Reset Key.
In the Reset Key dialog box, confirm that the key should be regenerated and click the Reset Key button.
Copy or download the private key.

-- DELETE THE KEY WHEN NOT NEEDED

==============================================
KNIFE OPERATIONS AND KNIFE.RB
==============================================
Knife needs a knife.rb with configuration infomration and paths to key files.
NOTE: Read validator, node and client topics above 

------------------
A typical knife.rb - see notes after this content
------------------
current_dir = File.dirname(__FILE__)
log_level                :info
log_location             STDOUT
editor  "vi"
node_name                "nodeName"
client_key               "#{current_dir}/nodeKey.pem"
validation_client_name   "orgName-validator"
validation_key           "#{current_dir}/orgName-validator.pem"
chef_server_url          "https://chef1.company.com/organizations/build-automation"
cookbook_path            ["#{current_dir}/../cookbooks"]
ssl_verify_mode          :verify_none

NOTE: node_name and nodeKey.pem should be sufficient to run knife commands and chef-client runs. 
      With that, client/node/chef-server-id can work on chef_server_urls for which they have access to.
node_name - actual node name or a client name or chef-server-id 
nodeKey.pem - private key for the node/client/chef-server-id
 
NOTE: validation client and key are necessary for first time bootstrap
validation_client_name - in the case nodeKey.pem is not available yet (like client.pem) then bootstrap using this
validation_key - the key for the validation client

ssl_verify_none - to avoid ssl/certificate errors

------------------------
knife.rb with client.pem - post bootstrap
------------------------
NOTE: This is post-bootstrap, with validation_client_name and validation_key removed not in knife.rb

Location: /etc/chef or other convenient location like $HOME/.chef or workdir/.chef

current_dir = File.dirname(__FILE__)
log_level                :info
log_location             STDOUT
editor  "vi"
node_name                "node1"
client_key               "#{current_dir}/client.pem"
chef_server_url          "https://chef1.company.com/organizations/build-automation"
cookbook_path            ["#{current_dir}/../cookbooks"]
ssl_verify_mode          :verify_none

------------------------
knife.rb with client.pem - to do bootstrap
------------------------
NOTE: This is before-bootstrap, with validation_client_name and validation_key added in knife.rb
NOTE: node_name and client_key is not placed in knife.rb as the node_name is assigned and client.pem is created during bootstrap

Location: /etc/chef or other convenient location like $HOME/.chef or workdir/.chef

current_dir = File.dirname(__FILE__)
log_level                :info
log_location             STDOUT
editor                   "vi"
validation_client_name   "orgName-validator"
validation_key           "#{current_dir}/orgName-validator.pem"
chef_server_url          "https://chef1.company.com/organizations/build-automation"
cookbook_path            ["#{current_dir}/../cookbooks"]
ssl_verify_mode          :verify_none

------------------------
knife.rb with chef-login.pem - to do knife non-bootstrap work?
------------------------
NOTE: This is to do general knife work (bootstrap also??)
NOTE: node_name is your logon-id to chef-server
NOTE: client_key is your logon-id's private key (from your starter kit)
NOTE: node_name, and client_key can be for a custom client also (see other sections in this doc)

Location: /etc/chef or other convenient location like $HOME/.chef or workdir/.chef

current_dir = File.dirname(__FILE__)
log_level                :info
log_location             STDOUT
editor  "vi"
node_name                "chef-login"
client_key               "#{current_dir}/client.pem"
chef_server_url          "https://chef1.company.com/organizations/build-automation"
cookbook_path            ["#{current_dir}/../cookbooks"]
ssl_verify_mode          :verify_none

=================================================================================
BOOTSTRAP - FROM CLIENT NODE ITSELF, USING CLIENT.RB instead of knife.rb
=================================================================================
Some info here: http://stackoverflow.com/questions/24788920/chef-clients-and-validators

- Remove or rename /etc/chef/client.pem if already there
NOTE: Better, backup /etc/chef and keep it safe --> as it may be necessary to re-bootstrap to the current organization later

- Create file client.rb in /etc/chef:
chef_server_url  "https://chefserver.company.com/organizations/orgName"
validation_client_name "orgName-validator"
validation_key '/etc/chef/orgName-validator.pem'
log_location   STDOUT or "/var/log/chef/client.log"
node_name "client-hostname"
ssl_verify_mode :verify_none
trusted_certs_dir "/etc/chef/trusted_certs"

Add 'interval' if you want to start chef-client daemon to run every 1800 sec or other number
interval 1800

- Copy key files into /etc/chef
orgName-validator.pem

- Run chef client once to boostrap automatically
# chef-client --once

Starting Chef Client, version 12.18.31
Creating a new client identity for client-hostname using the validator key.
resolving cookbooks for run list: []
Synchronizing Cookbooks:
Installing Cookbook Gems:
Compiling Cookbooks...
Converging 0 resources

Running handlers:
Running handlers complete
Chef Client finished, 0/0 resources updated in 14 seconds

- Check if client.pem, validation.pem and trusted_certs are created
# ls -l /etc/chef
total 16
-rw-------. 1 root root 1679 Feb 17 16:35 client.pem
-rw-r--r--. 1 root root  253 Feb 17 16:34 client.rb
-rwxr-xr-x. 1 root root 1674 Feb 17 16:27 orgName-validator.pem
drwxr-xr-x. 2 root root 4096 Feb 17 16:57 trusted_certs
-rw-------. 1 root root 1675 Feb 17 16:57 validation.pem

- Check in chef-server if the node is added

=================================================================================
BOOTSTRAP - FROM CLIENT NODE ITSELF, USING knife.rb and NODE'S ROOT USER PASSWORD
=================================================================================
- Remove or rename /etc/chef/client.pem if already there
NOTE: Better, backup /etc/chef and keep it safe --> as it may be necessary to re-bootstrap to the current organization later

-----------------------
VALIDATORLESS BOOTSTRAP
-----------------------
NOTE: orgName-validator.pem is not needed from chef client 12.1 onwards (per https://docs.chef.io/install_bootstrap.html)
HOWEVER, THIS SEEMED TO WORK AND AGAIN NOT WORK - IF IT DOES NOT WORK, THEN ADD VALIDATORS ALSO
Validatorless Bootstrap
   The ORGANIZATION-validator.pem is typically added to the .chef directory on the workstation. When a node is bootstrapped 
   from that workstation, the ORGANIZATION-validator.pem is used to authenticate the newly-created node to the Chef server 
   during the initial chef-client run. Starting with Chef client 12.1, it is possible to bootstrap a node using the USER.pem 
   file instead of the ORGANIZATION-validator.pem file. This is known as a “validatorless bootstrap”.
        
Create in /root/chef-repo/.chef (or some other .chef)
      -rw-r--r--. 1 root root 1674 Feb 17 04:13 chef-server-login-user.pem
      -rw-r--r--. 1 root root  425 Feb 17 04:13 knife.rb
      
Content of knife.rb:
current_dir = File.dirname(__FILE__)
log_level                :info
log_location             STDOUT
node_name                "chef-server-login-username"
client_key               "#{current_dir}/chef-server-login-username.pem"
chef_server_url          "https://chefserver.company.com/organizations/orgName"
cookbook_path            ["#{current_dir}/../cookbooks"]

#  knife bootstrap node01.company.com –ssh-user root --ssh-password root -N node01.company.com --node-ssl-verify-mode none
Creating new client for node01.company.com
Creating new node for node01.company.com
Connecting to node01.company.com
node01.company.com -----> Existing Chef installation detected
node01.company.com Starting first Chef Client run...
node01.company.com Starting Chef Client, version 12.4.0
node01.company.com resolving cookbooks for run list: []
node01.company.com Synchronizing Cookbooks:
node01.company.com Compiling Cookbooks...
node01.company.com [2017-02-17T04:16:07-06:00] WARN: Node node01.company.com has an empty run list.
node01.company.com Converging 0 resources
node01.company.com
node01.company.com Running handlers:
node01.company.com Running handlers complete
node01.company.com Chef Client finished, 0/0 resources updated in 6.737290423 seconds

Following get created:
      In /etc/chef:
            -rw-------. 1 root root 1680 Feb 17 04:16 client.pem
            -rw-r--r--. 1 root root  169 Feb 17 04:16 client.rb
            -rw-r--r--. 1 root root   16 Feb 17 04:16 first-boot.json

=================================================================================
BOOTSTRAP - FROM WORKSTATION, USING NODE'S ROOT USER SSH KEY INSTEAD OF PASSWORD
=================================================================================
- Remove or rename /etc/chef/client.pem if already there
NOTE: Better, backup /etc/chef and keep it safe --> as it may be necessary to re-bootstrap to the current organization later

- Generate key in #/root/.ssh on the server node01
- Copy the private key of it to O:\.chef on the laptop as O:\.chef\node01-root-id-rsa.pem

- Ensure that the following from starter kit of the organization are in O:\.chef:
1. chef-server-username.pem
2. organization-name-validator.pem

3. knife.rb with content as follows:
NOTE: chef-server-username is the username the user/service-account logs on to chef-server  (example 'ramesh' or 'oraclechef')
      organizationName is the name of the organization to which the node should belong (example 'oracleautomation')
      
# See https://docs.getchef.com/config_rb_knife.html for more information on knife configuration options
current_dir = File.dirname(__FILE__)
log_level                :info
log_location             STDOUT
editor  "vi"
node_name                "chef-server-username"
client_key               "#{current_dir}/chef-server-username.pem"
validation_client_name   "organizationName-validator"
validation_key           "#{current_dir}/organizationName-validator.pem"
chef_server_url          "https://chefserver.company.com/organizations/organizationName"
cookbook_path            ["#{current_dir}/../cookbooks"]

O:\.chef>knife bootstrap node01 --ssh-user root --identity-file 'O:\.chef\node01-root-id-rsa.pem' --node-name node01 --node-ssl-verify-mode none

Connecting to node01
node01 Starting first Chef Client run...
node01 Starting Chef Client, version 12.4.0
node01 resolving cookbooks for run list: []
node01 Synchronizing Cookbooks:
node01 Compiling Cookbooks...
node01 [2016-02-28T21:56:49-06:00] WARN: Node node01 has an empty run list.
node01 Converging 0 resources
node01
node01 Running handlers:
node01 Running handlers complete
node01 Chef Client finished, 0/0 resources updated in 6.716135316 seconds

Upload Oracle client cookbook:
O:\.chef>knife cookbook upload cbora12cclt
Uploading cbora12cclt    [0.1.0]
Uploaded 1 cookbook.

Set node run list

O:\.chef>knife node run_list set node01 'recipe[cbora12cclt]'
node01:
  run_list: recipe[cbora12cclt]'

chef-reset.rb
-------------
stop chef client
restart chef client with 15 min interval
verify
exit

O:\.chef>knife node run_list set node01 'recipe[cbora12cclt]','recipe[chef-reset]'
node01:
  run_list: recipe[cbora12cclt]','recipe[chef-reset]'

metadata.rb
0.1.1
