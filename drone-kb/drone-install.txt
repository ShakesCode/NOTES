======================
DRONE INSTALLATION
======================
https://github.com/drone/drone
Setup Documentation docs.drone.io/installation
Usage Documentation docs.drone.io/getting-started
Plugin Index plugins.drone.io
Getting Help docs.drone.io/getting-help

http://readme.drone.io/admin/installation-guide/

For github:
http://docs.drone.io/install-for-github/ --> install for github

** http://readme.drone.io/0.5/install/setup/github/ 
--> use this --> git URL and other environments in this

https://auth0.com/docs/connections/social/github --> how to get git client id and secret for the app
https://github.com/hbokh/docker-drone-builder/blob/master/README.md
https://github.com/containerized/containers/blob/dfee2992e16af677b16200bc750c16618410df3a/vimagick-dockerfiles/drone/README.md

SSL:
https://stackoverflow.com/questions/41330438/setting-up-a-drone-server-to-use-tls-ssl
--> http://readme.drone.io/0.5/install/server-configuration/

================
STEPS
================
Setup Documentation docs.drone.io/installation

----------------------------
Download Dronke docker image
----------------------------

$ docker pull drone/drone:0.7

$ docker images
REPOSITORY             TAG                 IMAGE ID            CREATED             SIZE
drone/drone            0.7                 c58de76939e9        20 hours ago        25.72 MB
postgres               latest              ca3a55649cfc        6 days ago          269.1 MB

------------------------------------------
GET THE GIT CLIENT AND SECRET FOR YOUR APP
------------------------------------------
You must register Drone with GitHub to obtain the client and secret. The authorization callback url must match <scheme>://<host>/authorize

- Inputs to Git Oauth settings
Application name = dronemymac
Homepage URL = http://localhost:80
Authorization callback URL = http://localhost:80/authorize

- Client ID and Secret for the above inputs
Client ID
1db26416fe00b33ac38f
Client Secret
980af5650a9bb97e6874e868fd292fe53059dd4d

- Client ID and secret for http://329afe65.ngrok.io

Client ID
d2a5ca90e87f7dc0a0cf
Client Secret
de04fac85d3bdc6a9acaddb930336ded31a7a319

----------------------------
----------------------------

----------------------------
Set the environment
----------------------------
** http://readme.drone.io/0.5/install/setup/github/ --> use this --> git URL and other environments in this

NOTE:  DRONE_GITHUB_URL can point to public or company github as required

-- USE THIS
export DRONE_GITHUB_URL=www.github.com
export DRONE_GITHUB_CLIENT=1db26416fe00b33ac38f
export DRONE_GITHUB_SECRET=980af5650a9bb97e6874e868fd292fe53059dd4d
export DRONE_SECRET=some_string (and remember it)

-- DONT USE THIS
export DRONE_GITHUB_CLIENT=1b5721a6c13bf3cbd1bd
export DRONE_GITHUB_SECRET=36547eba420b7f268a687f4696e24569d65e076d
export DRONE_SECRET=some_string (and remember it)

----------------------------
CREATE DOCKER-COMPOSE.YML
----------------------------
NOTE: Port forwarding is done in the following directive
    ports:
      - 80:8000

- docker-compose.yml
version: '2'

services:
  drone-server:
    image: drone/drone:0.7
    ports:
      - 80:8000
    volumes:
      - ./drone:/var/lib/drone/
    restart: always
    environment:
      - DRONE_OPEN=true
      - DRONE_GITHUB=true
      - DRONE_GITHUB_URL=${DRONE_GITHUB_URL}
      - DRONE_GITHUB_CLIENT=${DRONE_GITHUB_CLIENT}
      - DRONE_GITHUB_SECRET=${DRONE_GITHUB_SECRET}
      - DRONE_SECRET=${DRONE_SECRET}

  drone-agent:
    image: drone/drone:0.7
    command: agent
    restart: always
    depends_on: [ drone-server ]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_SERVER=ws://drone-server:8000/ws/broker
      - DRONE_SECRET=${DRONE_SECRET}
      
---------------------------------
BRING UP DRONE
---------------------------------
$ docker-compose up -d
$ <run your tests>
$ docker-compose down

up will bring up a container with drone in it
down will destroy the container

- Create/start
$ docker-compose up -d
Creating network "docker_default" with the default driver
Creating docker_drone-server_1
Creating docker_drone-agent_1

- Verify
$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                                   NAMES
adc6bc98be6e        drone/drone:0.7     "/drone agent"      5 seconds ago       Up 3 seconds        80/tcp, 443/tcp, 8000/tcp               docker_drone-agent_1
2208c95f5b47        drone/drone:0.7     "/drone server"     6 seconds ago       Up 4 seconds        80/tcp, 443/tcp, 0.0.0.0:80->8000/tcp   docker_drone-server_1

- Shutdown/destroy
$ docker-compose down

------------
Access Drone
------------
http://localhost:80 --> note: 80 of host is forwarded to 8000 of drone container

Upon login, an authorization screen comes:
--> this is to authorize access drone to access the github account (based on the github client and secret)

Click the authorization button
--> It will ask Github password - provide that
--> Then it will take you back to Drone 

-------------------
ACTIVATE THE REPOS
-------------------
On the left hand side, you see "Activate your repositories to get started"
--> Click on the link 'Activate' 
-->  - Sliders next to the repository names are to be used for activation 
-->  - it will create webhooks in github

If using localhost as URL, the 'post' from github event does not get posted - as git does not know where your localhost is.
Therefore, use 'ngrok' software to expose the localhost to internet - ngrok provides a URL to localhost.

If using ngrok to expose localhost to internet, edit the webhook in github after it gets created by activation process
--> or better, create a new webhook with URL of ngrok than localhost

----------------------
INSTALL DRONE CLI
----------------------
--> look up internet for this

----------------------
VERIFY using drone-cli
----------------------
$ drone info
User: coderdba
Email: coderdba@mail.com

$ drone repo ls
<list of your cookbooks discovered by drone>

$ drone repo info <cookbook in git/drone>
Owner: coderdba
Repo: cookbook_name
Type: git
Private: true
Remote: https://www.github.com/coderdba/cookbook_name

=========
SSL
=========
Generate key and cert:
openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout server.key -out server.crt

Modify docker-compose.yml:

version: '2'

services:
  drone-server:
    image: drone/drone:0.7
    ports:
      - 8080:8000
    volumes:
      - ./drone:/var/lib/drone/
      - ./drone/cert:/var/lib/drone/cert/
      - /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem:/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem
    restart: always
    environment:
      - DRONE_OPEN=true
      - DRONE_GITHUB=true
      - DRONE_GITHUB_URL=${DRONE_GITHUB_URL}
      - DRONE_GITHUB_CLIENT=${DRONE_GITHUB_CLIENT}
      - DRONE_GITHUB_SECRET=${DRONE_GITHUB_SECRET}
      - DRONE_SECRET=${DRONE_SECRET}
      - DRONE_GITHUB_SKIP_VERIFY=${DRONE_GITHUB_SKIP_VERIFY}
      - DRONE_SERVER_CERT=/var/lib/drone/cert/server.crt
      - DRONE_SERVER_KEY=/var/lib/drone/cert/server.key

  drone-agent:
    image: drone/drone:0.7
    command: agent
    restart: always
    depends_on: [ drone-server ]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_SERVER=wss://docker-host-name(or should it be left as drone-server):8080/ws/broker
      - DRONE_SECRET=${DRONE_SECRET}

=====================
APPENDIX
=====================

---------------------------------
CONFIGURATION OPTIONS (to set the right environment)
---------------------------------
http://readme.drone.io/0.5/install/setup/github/

Configuration

This is a full list of configuration options. Please note that many of these options use default configuration value that should work for the majority of installations.

DRONE_GITHUB=true
Set to true to enable the GitHub driver.

DRONE_GITHUB_URL=https://github.com
GitHub server address.

DRONE_GITHUB_CLIENT
Github oauth2 client id.

DRONE_GITHUB_SECRET
Github oauth2 client secret.

DRONE_GITHUB_SCOPE=repo,repo:status,user:email,read:org
Comma-separated Github oauth scope.

DRONE_GITHUB_GIT_USERNAME
Optional. Use a single machine account username to clone all repositories.

DRONE_GITHUB_GIT_PASSWORD
Optional. Use a single machine account password to clone all repositories.

DRONE_GITHUB_PRIVATE_MODE=false
Set to true if Github is running in private mode.

DRONE_GITHUB_MERGE_REF=true
Set to true to use the refs/pulls/%d/merge vs refs/pulls/%d/head

DRONE_GITHUB_CONTEXT=continuous-integration/drone
Customize the GitHub status message context

DRONE_GITHUB_SKIP_VERIFY=false
Set to true to disable SSL verification.
