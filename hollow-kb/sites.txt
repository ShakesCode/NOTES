http://hollow.how/getting-started/
http://hollow.how/infrastructure/
http://hollow.how/indexing-querying/

http://hollow.how/producer-consumer/ --> the blob store - snapshot, delta, reverse delta

http://hollow.how/advanced-topics/#in-memory-data-layout
http://hollow.how/interacting-with-a-dataset/

https://www.infoq.com/news/2016/12/announcing-netflix-hollow --> Q&A with developer - GOOD read this

CODE
https://github.com/Netflix/hollow

CODE SAMPLE
https://github.com/xiaolezheng/lxz-ceshi/tree/master/src/main/java/com/lxz/hollow

NEWS ARTICLES
https://medium.com/netflix-techblog/netflixoss-announcing-hollow-5f710eefca4b 
--> Good intro by the Hollow developer

https://www.theregister.co.uk/2016/12/05/netflix_java_inmemory_database_toolkit/
https://www.infoworld.com/article/3147370/open-source-tools/move-over-memcached-and-redis-here-comes-netflixs-hollow.html

https://www.infoq.com/news/2017/01/netflix-introduces-hollow
--> GOOD SUMMARY OF DATASETS, PRODUCER, CONSUMER AND API GENERATION
Hollow manages datasets which are built by a single producer, and disseminated to one or many consumers for read-only access.
A dataset changes over time. The timeline for a changing dataset can be broken down into discrete data states, each of which 
is a complete snapshot of the data at a particular point in time.

The producer and the consumers handle datasets via a state engine that is transitioned between data states. A producer uses a 
write state engine and a consumer uses a read state engine.
