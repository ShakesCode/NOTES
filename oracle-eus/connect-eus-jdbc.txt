=================================
CONNECT USING EUS USER USING JDBC
=================================
All types of URLs/Aliases - http://docs.oracle.com/cd/B28359_01/java.111/b31224/urls.htm

======
OID
======
http://stackoverflow.com/questions/8386833/jdbc-connect-string-for-oracle-oid-using-oci-driver

===================
JDBC FAQ
===================
http://www.oracle.com/technetwork/database/enterprise-edition/jdbc-faq-090281.html#05_16

Do the Oracle JDBC drivers support LDAP in the connection URL?
  Yes. JDBC THIN driver supports both regular LDAP and LDAP over SSL in the connection URL, 
  for example, when using Oracle Internet Directory as an LDAP provider. 
  Please refer to both the Oracle JDBC Developer's Guide and the Oracle Net Services Administrator's Guide for detail.
  
------------------------------
JDBC URL 
------------------------------

------------------------------------------------------------------------------------------
https://docs.oracle.com/cd/E11882_01/java.112/e16548/urls.htm
------------------------------------------------------------------------------------------
"jdbc:oracle:thin:@ldap://ldap.example.com:7777/sales,cn=OracleContext,dc=com"

------------------------------------------------------------------------------------------
https://docs.oracle.com/cd/E11882_01/java.112/e16548/urls.htm#CHDBICFA
------------------------------------------------------------------------------------------

LDAP Syntax

An example of database specifier using the Lightweight Directory Access Protocol (LDAP) syntax is as follows:

"jdbc:oracle:thin:@ldap://ldap.example.com:7777/sales,cn=OracleContext,dc=com"
When using SSL, change this to:

"jdbc:oracle:thin:@ldaps://ldap.example.com:7777/sales,cn=OracleContext,dc=com"
Note:
The JDBC Thin driver can use LDAP over SSL to communicate with Oracle Internet Directory if you substitute ldaps: for ldap: 
in the database specifier. The LDAP server must be configured to use SSL. If it is not, then the connection attempt will hang.
The JDBC Thin driver supports failover of a list of LDAP servers during the service name resolution process, without the need 
for a hardware load balancer. Also, client-side load balancing is supported for connecting to LDAP servers. 
A list of space separated LDAP URLs syntax is used to support failover and load balancing.

When a list of LDAP URLs is specified, both failover and load balancing are enabled by default. The oracle.net.ldap_loadbalance
connection property can be used to disable load balancing, and the oracle.net.ldap_failover connection property can be used to 
disable failover.

An example, which uses failover, but with client-side load balancing disabled, is as follows:

Properties prop = new Properties();
String url = "jdbc:oracle:thin:@ldap://ldap1.example.com:3500/cn=salesdept,cn=OracleContext,dc=com/salesdb " +
"ldap://ldap2.example.com:3500/cn=salesdept,cn=OracleContext,dc=com/salesdb " +
"ldap://ldap3.example.com:3500/cn=salesdept,cn=OracleContext,dc=com/salesdb";

prop.put("oracle.net.ldap_loadbalance", "OFF" );
OracleDataSource ods = new OracleDataSource();
ods.setURL(url);
ods.setConnectionProperties(prop);
The JDBC Thin driver supports LDAP nonanonymous bind. A set of JNDI environment properties, which contains authentication information,
can be specified for a data source. If a LDAP server is configured as not allowing anonymous bind, then authentication information must
be provided to connect to the LDAP server. The following example shows a simple clear-text password authentication:

String url = "jdbc:oracle:thin:@ldap://ldap.example.com:7777/sales,cn=salesdept,cn=OracleContext,dc=com";

Properties prop = new Properties();
prop.put("java.naming.security.authentication", "simple");
prop.put("java.naming.security.principal","cn=salesdept,cn=OracleContext,dc=com");
prop.put("java.naming.security.credentials", "mysecret");

OracleDataSource ods = new OracleDataSource();
ods.setURL(url);
ods.setConnectionProperties(prop);
Since JDBC passes down the three properties to JNDI, the authentication mechanism chosen by client is consistent with how these
properties are interpreted by JNDI. For example, if the client specifies authentication information without explicitly specifying the
java.naming.security.authentication property, then the default authentication mechanism is "simple". Please refer to relevant JDNI
documentation for details.

=============================
EXAMPLES
=============================
-------------------
CONNECT STRING ONLY
-------------------
http://stackoverflow.com/questions/1646630/what-is-the-correct-jdbc-url-to-connect-to-a-rac-database
      The point of a tnsnames file, the older Oracle Names server, and the newer, recommended LDAP directory server method of resolving
      database names is to avoid having to hardcode hostnames, addresses, ports, etc. into your connection string. 
      The DBAs should be able to move the database to a new host or port without breaking anything.

*** The best way to set your thin connect URL is with the following syntax:
jdbc:oracle:thin:@ldap://<OID server name>:<OID port>/<DB SID or Service Name>,cn=OracleContext,dc=<yourdomain>

*** So in your case, if "oid" were the DNS-resolvable name of the OID server at your company, and it used port 5000, it would be:
jdbc:oracle:thin:@ldap://oid:5000/mydb1,cn=OracleContext,dc=myco,dc=com

-------------------
-------------------
https://markjbobak.wordpress.com/2013/12/11/referencing-ldap-for-jdbc-thin-client-connections/
https://kb.sos-berlin.com/pages/viewpage.action?pageId=3638383
http://stackoverflow.com/questions/6778461/how-should-i-write-jdbc-url-for-oracle-with-ldap-and-two-ldap-servers

http://www.adamretter.org.uk/blog/entries/LDAPTest.java
http://www.javaworld.com/article/2076073/java-web-development/ldap-and-jndi--together-forever.html
http://docs.oracle.com/javase/jndi/tutorial/ldap/security/ldap.html
http://docs.oracle.com/javase/jndi/tutorial/getStarted/examples/directory.html
http://www.ibm.com/support/knowledgecenter/SSSHYH_7.1.0.4/com.ibm.netcoolimpact.doc/user/imug_oracledb_ldap_url_t.html
