===========================
REDIS CLUSTER - NON SHARDED
===========================
https://redis.io/topics/cluster-tutorial  --> on same machine

cheat sheet - https://willwarren.com/2017/10/redis-cluster-cheatsheet/

https://stackoverflow.com/questions/37655523/redis-cluster-different-machines --> on different machines 
--> with redis_trib.rb

https://www.linode.com/docs/applications/big-data/how-to-install-and-configure-a-redis-cluster-on-ubuntu-1604 --> multi mach
--> with redis_trib.rb
--> with sharding

https://www.digitalocean.com/community/tutorials/how-to-configure-a-redis-cluster-on-ubuntu-14-04 --> differenent machines 
--> more detailed 
--> with slaveof directive

https://developers.redhat.com/blog/2017/06/09/how-to-setup-a-redis-server-cluster-on-red-hat/ --> diff mach, with script

https://redislabs.com/redis-enterprise-documentation/administering/cluster-operations/new-cluster-setup/


- INSTALL RUBY
Needed for redis-trib.rb
# apt-get install ruby

- INSTALL REDIS GEM
# gem install redis

====================================
SINGLE MASTER MULTI SLAVE CLUSTER
====================================
- Edit /etc/redis/redis_6380.conf
ON ALL NODES - MASTER AND SLAVE
NOTE: You can use different ports on different severs/machines/vms also

Add/uncomment:
cluster-enabled yes
cluster-config-file /etc/redis/nodes-6380.conf
cluster-node-timeout 15000

- REMOVE AUTOSTART STANDALONE REDIS ON THE PORT
(maybe NOT REQUIRED)
# update-rc.d redis_6380 remove

- Restart Redis 
NOTE: This will start Redis in cluster mode
NOTE: Do on all nodes - master and slave

/etc/init.d/redis_6380 stop
/etc/init.d/redis_6380 start

# ps -ef |grep redis
root      1069     1  0 10:04 ?        00:00:01 /usr/local/bin/redis-server 0.0.0.0:6379
root      1338     1  0 10:21 ?        00:00:00 /usr/local/bin/redis-server 0.0.0.0:6380 [cluster]


====================================
MULTI-MASTER CLUSTER
====================================
- Create the cluster --> with three masters
# redis-stable/src/redis-trib.rb create ip.of.server1:6380 ip.of.server2:6380 ip.of.server3:6380

# ./redis-trib.rb create 110.63.170.147:6380 110.63.171.139:6380 110.63.171.191:6380
>>> Creating cluster
>>> Performing hash slots allocation on 3 nodes...
Using 3 masters:
110.63.170.147:6380
110.63.171.139:6380
110.63.171.191:6380
M: 0d9356adc1fd9291e312d7ee529255074cbda133 110.63.170.147:6380
   slots:0-5460 (5461 slots) master
M: 64b4a9f1f97245e804a0ab84d3f203954b2bad42 110.63.171.139:6380
   slots:5461-10922 (5462 slots) master
M: 1c3d30f6de183480fdfe1266d8a5adaccd04d8df 110.63.171.191:6380
   slots:10923-16383 (5461 slots) master
Can I set the above configuration? (type 'yes' to accept): yes
>>> Nodes configuration updated
>>> Assign a different config epoch to each node
>>> Sending CLUSTER MEET messages to join the cluster
Waiting for the cluster to join..
>>> Performing Cluster Check (using node 110.63.170.147:6380)
M: sdfsdfdsfsfswe3rerw 110.63.170.147:6380
   slots:0-5460 (5461 slots) master
   0 additional replica(s)
M: sdfsfrwerwsdfsdffds 110.63.171.191:6380
   slots:10923-16383 (5461 slots) master
   0 additional replica(s)
M: sdfdsfasdfswr23423e 110.63.171.139:6380
   slots:5461-10922 (5462 slots) master
   0 additional replica(s)
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.

- /etc/redis/nodes-6380.conf 

sdfsdfdsfsfswe3rerw 110.63.171.191:6380@16380 master - 0 1510568774973 3 connected 10923-16383
sdfsfrwerwsdfsdffds 110.63.171.139:6380@16380 master - 0 1510568775463 2 connected 5461-10922
sdfdsfasdfswr23423e 192.168.110.112:6380@16380 myself,master - 0 0 1 connected 0-5460
vars currentEpoch 3 lastVoteEpoch 0

# ./redis-trib.rb info 10.63.70.47:6380
110.63.170.147:6380 (0d9356ad...) -> 0 keys | 5461 slots | 0 slaves.
110.63.171.191:6380 (1c3d30f6...) -> 0 keys | 5461 slots | 0 slaves.
110.63.171.139:6380 (64b4a9f1...) -> 0 keys | 5462 slots | 0 slaves.
[OK] 0 keys in 3 masters.
0.00 keys per slot on average.

# ./redis-trib.rb del-node 10.63.70.47:6380 0d9356adc1fd9291e312d7ee529255074cbda133
>>> Removing node 0d9356adc1fd9291e312d7ee529255074cbda133 from cluster 10.63.70.47:6380
[ERR] Node 10.63.70.47:6380 is not empty! Reshard data away and try again.

# ./redis-trib.rb rebalance --weight 0d9356adc1fd9291e312d7ee529255074cbda133=0 10.63.70.47:6380
>>> Performing Cluster Check (using node 110.63.170.147:6380)
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.
>>> Rebalancing across 3 nodes. Total weight = 2.0
Moving 2731 slots from 110.63.170.147:6380 to 110.63.171.191:6380
#############################################################
#############################################################
#############################################################

# ./redis-trib.rb del-node 110.63.170.147:6380 0d9356adc1fd9291e312d7ee529255074cbda133
>>> Removing node 0d9356adc1fd9291e312d7ee529255074cbda133 from cluster 10.63.70.47:6380
>>> Sending CLUSTER FORGET messages to the cluster...
>>> SHUTDOWN the node.

