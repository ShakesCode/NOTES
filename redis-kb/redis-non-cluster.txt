======================================
REDIS NON CLUSTER
======================================

https://redis.io/topics/quickstart
https://redis.io/topics/rediscli

======================================
PREREQUISITES
======================================

- INSTALL GCC AND MAKE
# prerequisite - install gcc and make
$ sudo apt-get update
$ sudo apt-get install gcc
$ sudo apt-get install make

$ sudo useradd -m redis
$ sudo su - redis
/home/redis

- OPEN PORTS 
6379 is the default port

- DOWNLOAD REDIS SOFTWARE
# download
$ cd /home/redis
$ wget http://download.redis.io/redis-stable.tar.gz
- OR - 
curl http://download.redis.io/redis-stable.tar.gz -o redis-stable.tar.gz

- OR - wget or curl specific version
http://download.redis.io/releases/redis-4.0.2.tar.gz

======================================
STANDARDIZED INSTALL WITH AUTO-START
======================================
----------
COMPILE
----------
$ cd /home/redis/redis1
$ tar xvzf /home/redis/redis-4.0.2.tar.gz
$ cd cd redis-4.0.2
$ make

--------------------
STANDARDIZE INSTALL
--------------------
# cp /home/redis/redis1/redis-4.0.2/src/redis-server /usr/local/bin/.
# cp /home/redis/redis1/redis-4.0.2/src/redis-cli /usr/local/bin/.

# sudo mkdir /etc/redis
# sudo mkdir /var/redis

# cp /home/redis/redis1/redis-4.0.2/utils/redis_init_script /etc/init.d/redis_6379
# cp /home/redis/redis1/redis-4.0.2/redis.conf /etc/redis/6379.conf

- Create a directory inside /var/redis that will work as data and working directory for this Redis instance:
# mkdir /var/redis/6379

- Edit the configuration file, making sure to perform the following changes:
  Set daemonize to yes (by default it is set to no).
  Set the pidfile to /var/run/redis_6379.pid (modify the port if needed).
  Change the port accordingly. In our example it is not needed as the default port is already 6379.
  Set your preferred loglevel.
  Set the logfile to /var/log/redis_6379.log
  Set the dir to /var/redis/6379 (very important step!)

# update-rc.d redis_6379 defaults
insserv: warning: script 'redis_6379' missing LSB tags and overrides

# /etc/init.d/redis_6379 start
Starting Redis server...

# ps -ef|grep redis
root     15438  4886  0 09:50 pts/0    00:00:00 sudo su - redis
root     15439 15438  0 09:50 pts/0    00:00:00 su - redis
redis    15440 15439  0 09:50 pts/0    00:00:00 -su
root     15798     1  0 10:17 ?        00:00:00 /usr/local/bin/redis-server 127.0.0.1:6379
root     15803 15732  0 10:18 pts/1    00:00:00 grep --color=auto redis

- Test
$ redis-cli ping
PONG

$ redis-cli -h localhost -p 6379 ping
PONG

$ redis-cli -h 10.63.71.175 -p 6379 ping
Could not connect to Redis at 10.63.71.175:6379: Connection refused
--> need to open the port for the specific IP

--------------------
SETUP PASSWORD
--------------------
$ redis-cli
127.0.0.1:6379> CONFIG get requirepass
1) "requirepass"
2) ""
127.0.0.1:6379> CONFIG set requirepass "redis123"
OK
127.0.0.1:6379> CONFIG get requirepass
(error) NOAUTH Authentication required.

127.0.0.1:6379> AUTH password
(error) ERR invalid password

127.0.0.1:6379> AUTH redis123
OK
127.0.0.1:6379> CONFIG get requirepass
1) "requirepass"
2) "redis123"

127.0.0.1:6379> 

---------------------------
ENABLE PASSWORD FOR STOP
---------------------------
https://stackoverflow.com/questions/32165078/how-to-start-and-stop-redis-service-with-authentication
https://stackoverflow.com/questions/23396336/shutdown-redis-server-from-command-line/28658706#28658706

When password is set for the instance, stop requires password, but does not prompt for password.
# /etc/init.d/redis_6379 stop
Stopping ...
(error) NOAUTH Authentication required.
Waiting for Redis to shutdown ...
Waiting for Redis to shutdown ...

- https://stackoverflow.com/questions/32165078/how-to-start-and-stop-redis-service-with-authentication

You have to manually edit the start/stop-service script:

sudo vi /etc/init.d/redis_6379
Find the following line:

$CLIEXEC -p $REDISPORT shutdown
And replace it with the following 'the_password' is where your password goes:

$CLIEXEC -p $REDISPORT -a the_password shutdown
--> $CLIEXEC -p $REDISPORT -a redis123 shutdown
Now you should be able to start and stop the service without any problems

-- NOT PREFERRED METHOD
-- https://stackoverflow.com/questions/23396336/shutdown-redis-server-from-command-line/28658706#28658706

You could modify your init.d/redis_6379 script and use the -a parameter of redis-cli to specify the password:
--> NOTE: This will be a security risk as every redis-cli command now automatically gets executed with the password
CLIEXEC="/usr/local/bin/redis-cli -a the_password"

---------------------------
ENABLE REMOTE CONNECTIONS
---------------------------
https://stackoverflow.com/questions/19091087/open-redis-port-for-remote-connections
In file /etc/redis/6379.conf

Change the line "bind 127.0.0.1" to the following:

bind 0.0.0.0



===========================
RUNNING MULTIPLE INSTANCES
===========================
https://discuss.pivotal.io/hc/en-us/articles/206087627-How-to-setup-and-run-multiple-Redis-server-instances-on-a-Linux-host




===========================
RUNNING MULTIPLE INSTANCES - ANOTHER WAY
===========================
# make directories for two redis installations
$ mkdir /home/redis/redis1 /home/redis/redis2

# install instance1 
$ cd /home/redis/redis1
$ tar xvzf /home/redis/redis-4.0.2.tar.gz
$ cd cd redis-4.0.2
$ make

# install instance2 (maybe a different version)
$ cd /home/redis/redis2
$ tar xvzf /home/redis/redis-4.0.2.tar.gz
$ cd cd redis-4.0.2
$ make
