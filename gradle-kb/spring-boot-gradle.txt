==============================
SPRING BOOT WITH GRADLE
==============================

============
REFERENCES
============
MAIN - https://spring.io/guides/gs/spring-boot/
OTHER- https://www.petrikainulainen.net/programming/gradle/getting-started-with-gradle-creating-a-spring-boot-web-application-project/

============
STEPS
============
- CREATE WORKING DIRECTORY
$ mkdir spring1
$ cd spring1
$ gradle wrapper

$ mkdir -p src/main/java/hello

- CREATE BUILD.GRADLE
https://spring.io/guides/gs/spring-boot/

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.3.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

bootJar {
    baseName = 'gs-spring-boot'
    version =  '0.1.0'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    testCompile("junit:junit")
}

- CREATE CONTROLLER CLASS
src/main/java/hello/HelloController.java


package hello;

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;

@RestController
public class HelloController {

    @RequestMapping("/")
    public String index() {
        return "Greetings from Spring Boot!";
    }

}

- CREATE MAIN APPLICATION CLASS
src/main/java/hello/Application.java


package hello;

import java.util.Arrays;

import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;

@SpringBootApplication
public class Application {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }

    @Bean
    public CommandLineRunner commandLineRunner(ApplicationContext ctx) {
        return args -> {

            System.out.println("Let's inspect the beans provided by Spring Boot:");

            String[] beanNames = ctx.getBeanDefinitionNames();
            Arrays.sort(beanNames);
            for (String beanName : beanNames) {
                System.out.println(beanName);
            }

        };
    }

}

- BUILD & RUN
./gradlew build && java -jar build/libs/gs-spring-boot-0.1.0.jar

- ACCESS THE APPLICATION URL
$ curl localhost:8080
Greetings from Spring Boot!




======================== ======================== ========================
======================== ======================== ========================
APPENDIX - BUILD.GRADLE
======================== ======================== ========================
======================== ======================== ========================
EXAMPLE 1:
Create a file build.gradle with contents:
buildscript {
  repositories {
    jcenter()
    mavenCentral()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
                'org.springframework.boot:spring-boot-gradle-plugin:1.2.5.RELEASE',
                'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.0.2'
  }
}
mainClassName = "com.g.spring1.Main"

version = "0.0.1"

distTar.version = ""

- EXAMPLE2
buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
          url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath(
                'org.springframework.boot:spring-boot-gradle-plugin:1.2.5.RELEASE',
                'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.0.2'
        )
    }
}
 
apply plugin: 'java'
apply plugin: 'org.unbroken-dome.test-sets'
apply plugin: 'spring-boot'
 
sourceCompatibility = 1.8
targetCompatibility = 1.8

mainClassName = "com.g.spring1.Main"
version = "0.0.1"
distTar.version = ""
 
testSets {
    integrationTest { dirName = 'integration-test' }
}
 
project.integrationTest {
    outputs.upToDateWhen { false }
}
 
check.dependsOn integrationTest
integrationTest.mustRunAfter test
 
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}
