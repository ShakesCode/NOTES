================================================
            OPENSTACK MANUAL SETUP
================================================

Note: The tooling is for MAC

========================
SETUP TENANT
========================
Obtain tenant in Openstack
Upload your keys - or generate specific keys
- If created Openstack specific key - Download the private key (or is it public key to download)
Download RC.sh file
--> more details in other dedicated section below

========================
INSTALL CLIENT TOOLS
========================
--------------------------
INSTALL ‘virtualenv’
--------------------------
NOTE:  This is a virtual-environment creator with specific Python and openstack-tools version

— THIS FAILED (as in tutorial)

Open a terminal session and run the following command. 
This will download the tool to create a virtual python environment.

~$ easy_install --user virtualenv
(NOTE: if you get an SSL: CERTIFICATE_VERIFY_FAILED error, try this command first : unset SSL_CERT_FILE)

— THIS WORKED 
https://virtualenv.pypa.io/en/stable/installation/

$ which pip
/usr/local/bin/pip

$ sudo pip install virtualenv
Password:
The directory '/Users/myusername/Library/Caches/pip/http' or its parent directory is not owned by the current user and the cache has been disabled. Please check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.
The directory '/Users/myusername/Library/Caches/pip' or its parent directory is not owned by the current user and caching wheels has been disabled. check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.
Collecting virtualenv
  Downloading virtualenv-15.1.0-py2.py3-none-any.whl (1.8MB)
    100% |..................| 1.8MB 233kB/s 
Installing collected packages: virtualenv
Successfully installed virtualenv-15.1.0

$ which virtualenv
/usr/local/bin/virtualenv

--------------------------
CREATE VIRTUAL ENVIRONMENT
--------------------------
NOTE: This will create a directory ~/openstack and under that all client software will be installed later on

- CREATE
$ virtualenv ~/openstack
New python executable in /Users/myusername/openstack/bin/python2.7
Also creating executable in /Users/myusername/openstack/bin/python
Installing setuptools, pip, wheel...done.

$ cd ~/openstack
$ ls -l
total 8
drwxr-xr-x  16 myusername  DHC\Domain Users  544 Nov  6 16:15 bin
drwxr-xr-x   3 myusername  DHC\Domain Users  102 Nov  6 16:15 include
drwxr-xr-x   3 myusername  DHC\Domain Users  102 Nov  6 16:15 lib
-rw-r--r--   1 myusername  DHC\Domain Users   60 Nov  6 16:15 pip-selfcheck.json
$ pwd
/Users/myusername/openstack

- ACTIVATE
source ~/openstack/bin/activate

—> You will get the following prompt
(openstack) $

--------------------------
INSTALL OPENSTACK TOOLS
--------------------------
SOME TIPS:
     Do this to avoid errors like the following  (from https://github.com/facebook/prophet/issues/140)
      - Do this - pip install pystan
      - To avoid - Command "python setup.py egg_info" failed with error code 1 in  
        /private/var/folders/wg/yyp7cbss42x9wnlnyhjh5gq9jzvtrx/T/pip-build-F9mPif/positional/

      - or, try pip install --trusted-host pypi.python.org <package name>
      - or, try first do this “pip install certifi”  and then do the rest of the package installs
      - or try https://github.com/pypa/virtualenv/issues/964

INSTALL PREREQUISITES
(openstack) $ pip install pystan
(openstack) $ pip install pbr>=1.8
(openstack) $ pip list
certifi (2017.11.5)
Cython (0.27.3)
numpy (1.13.3)
pbr (3.1.1)
pip (9.0.1)
pystan (2.17.0.0)
setuptools (36.6.0)
wheel (0.30.0)

INSTALL OPENSTACK TOOLS
pip install python-openstackclient --upgrade
pip install python-novaclient --upgrade
pip install python-neutronclient --upgrade
pip install python-cinderclient --upgrade
pip install python-swiftclient --upgrade
pip install python-glanceclient --upgrade
pip install python-saharaclient --upgrade
pip install python-heatclient --upgrade
pip install oslo.log --upgrade

Verify
$ heat --version
$ openstack —version
…
…

============================	
SETUP ENVIRONMENT
============================
------------------------------------
Get the RC file and EC2 credentials
------------------------------------
- GET THE FILES
In web-UI —> Compute —> Access & Security

1. —> Download OpenStack RC File — This gives TENANT-openrc.sh
2. —> Download EC2 Credentials — This gives TENANT-x509.zip - which contains caret.pem, cert.pem, ec2rc.sh, pk.pem

- COPY THE FILES TO HOME DIRECTORY
Copy DBOPT-Openrc.sh as username_projectname.sh into home directory.

------------------------------------
CERTIFICATES
------------------------------------
Download certificates for the company and store it in home directory as ~/.company.crt
--> if it is your own install, probably haxx or self-signed certificate should do

Source it in the RC file as:
export OS_CACERT=$HOME/.company.crt

------------------------------------
SOURCE  ENVIRONMENT
------------------------------------
Source the RC file: (inside the virtualenv)

$ source ~/username_projectname.sh
--> This will prompt for a password - give the LAN password - which is same as OST password.

Verify:
(openstack) $ env | grep OS_
OS_AUTH_URL=https://openstack.company.com:5000/v2.0
OS_CACERT=/Users/myusername/.company.crt
OS_PASSWORD=<password>
OS_PROJECT_NAME=MYTENANT
OS_REGION_NAME=RegionOne
OS_TENANT_ID=alsdjfs90ad72543be89f9d54f8311ad9e
OS_TENANT_NAME=MYTENANT
OS_USERNAME=myusername

Verify actually connecting to openstack server:
$ openstack server list

------------------------------------
UPLOAD KEYPAIR (OR CREATE)
------------------------------------
- UPLOAD EXISTING
Compute —> Access&Security —> Keypairs —> Import Key Pair

Upload an existing or newly created personal key pair  (as MySshKey)
(you can create a new one by ssh-keygen or use the one you have already)
--> You can use your git key - so that you dont have to maintain many keys

- CREATE NEW
Optionally, you can create a key pair with ‘Create Key Pair’ option

Compute —> Access —> Keypair —> Create Key Pair
Or, use CLI:
$ openstack keypair create --public-key ~/.ssh/id_rsa.pub MyOpenstackKey

=======================================
CREATE OPENSTACK RESOURCES
=======================================
---------------------------------------
CREATE FLOATING IPs
---------------------------------------
- List external networks
(openstack) $ openstack network list --external

- Create one or more floating IPs
(openstack) $ openstack floating ip create ext_vlan1001_net

—->  Or, in web-UI under Access & Security

- List floating IPs
(openstack) $ openstack floating ip list

+--------------------------------------+---------------------+------------------+------+------------------------------
| ID                          | Floating IP Address | Fixed IP Address | Port | Floating Network | Project       |
+--------------------------------------+---------------------+------------------+------+------------------------------
| c61b-473e-b020-d6a1096b3942 | 110.163.71.39         | None             | None | d7f4-49fc-84ea-acfbcab71e9a |  |
| 9720-4d79-a20a-20a7ada67aef | 110.163.71.175        | None             | None | d7f4-49fc-84ea-acfbcab71e9a |  |
| b337-43e1-b243-82c1d191212a | 110.163.70.47         | None             | None | d7f4-49fc-84ea-acfbcab71e9a |  |
| d2c9-408d-8ba0-34b566d36405 | 110.163.71.91         | None             | None | d7f4-49fc-84ea-acfbcab71e9a |  |

---------------------------------------
CREATE A NETWORK 
---------------------------------------
This network will network the machines 
Further, we need to add a router and add a load balancer
The machines will be inter-networked with a private network 
 - and one or more will be open to outside world by floating IP(s)

NOTE: neutron is deprecated - use openstack instead

$ neutron net-create MyNetwork   
- OR - 
$ openstack network create MyNetwork

---------------------------------------
CREATE A SUBNET
---------------------------------------
$ neutron subnet-create --name MySubNet MyNetwork 192.168.10.0/24
- OR - 
$ openstack subnet create MySubNet --network MyNetwork --subnet-range 192.168.10.0/24

---------------------------------------
ASSOCIATE SUBNET WITH DNS SERVERS
---------------------------------------
$ neutron subnet-update MySubNet --dns-nameserver 110.197.140.116 --dns-nameserver 110.164.40.216
- OR - 
$ openstack subnet set MySubNet --dns-nameserver 110.197.140.116 --dns-nameserver 110.164.40.216

---------------------------------------
Verify
---------------------------------------
In WebUI go to networks, find the MyNetwork network, click on it to see the subnet and associated ports

(openstack) $ openstack network show MyNetwork
- OR - 
$ neutron network show MyNetwork

+---------------------------+--------------------------------------+
| Field                     | Value                                |
+---------------------------+--------------------------------------+
| admin_state_up            | UP                                   |
| availability_zone_hints   | None                                 |
| availability_zones        | None                                 |
| created_at                | None                                 |
| description               | None                                 |
| dns_domain                | None                                 |
| id                        | d9376-4955-83a6-52627b106dd6         |
| ipv4_address_scope        | None                                 |
| ipv6_address_scope        | None                                 |
| is_default                | None                                 |
| is_vlan_transparent       | None                                 |
| mtu                       | 0                                    |
| name                      | MyNetwork                            |
| port_security_enabled     | True                                 |
| project_id                | None                                 |
| provider:network_type     | None                                 |
| provider:physical_network | None                                 |
| provider:segmentation_id  | None                                 |
| qos_policy_id             | None                                 |
| revision_number           | None                                 |
| router:external           | Internal                             |
| segments                  | None                                 |
| shared                    | False                                |
| status                    | ACTIVE                               |
| subnets                   | fa149712a-7437-4052-b415-267e01fa84a |
| tags                      | None                                 |
| updated_at                | None                                 |
+---------------------------+--------------------------------------+

(openstack) $ openstack subnet show MySubNet   
- OR - 
$ neutron subnet show MySubNet
                                                           
+-------------------------+--------------------------------------+
| Field                   | Value                                |
+-------------------------+--------------------------------------+
| allocation_pools        | 192.168.10.2-192.168.10.254          |
| cidr                    | 192.168.10.0/24                      |
| created_at              | None                                 |
| description             | None                                 |
| dns_nameservers         | 10.64.40.216, 10.97.40.216           |
| enable_dhcp             | True                                 |
| gateway_ip              | 192.168.10.1                         |
| host_routes             |                                      |
| id                      | fa149712a-7437-4052-b415-267e01fa84a |
| ip_version              | 4                                    |
| ipv6_address_mode       | None                                 |
| ipv6_ra_mode            | None                                 |
| name                    | MySubNet                             |
| network_id              | d9376-4955-83a6-52627b106dd6         |
| project_id              | ef64cd7ad72543be89f9d54f8311ad9e     |
| revision_number         | None                                 |
| segment_id              | None                                 |
| service_types           | None                                 |
| subnetpool_id           | None                                 |
| tags                    | None                                 |
| updated_at              | None                                 |
| use_default_subnet_pool | None                                 |
+-------------------------+--------------------------------------+

-------------
CREATE ROUTER
-------------
- Create a Router
$ openstack router create MyRouter
- OR - 
$ neutron router-create MyRouter

- Connect the Router to the Internal Subnet

$ openstack router add subnet MyRouter MySubNet
- OR - 
$ neutron router-interface-add MyRouter MySubNet

- Attach Router to an External Network

$ openstack router set MyRouter --external-gateway ext_vlan1001_net
- OR -
$ neutron router-gateway-set MyRouter ext_vlan1001_net

==========================
SECURITY GROUPS AND RULES
==========================

-----------------------------------
Create a Bastion Security Group
-----------------------------------
A 'basic' security group which allows only ssh and pings into it
Usually the 'bastion' host is assigned this - so that one can ping and ssh into it from outside

Direction  Ether Type  IP Protocol  Port Range  Remote IP Prefix
Egress	IPv4	Any	Any	0.0.0.0/0
Egress	IPv6	Any	Any	::/0
Ingress	IPv4	ICMP	Any	0.0.0.0/0
Ingress	IPv4	TCP	22 (SSH)	0.0.0.0/0

- Create the security group

$ openstack security group create BasicSG --description 'Allow SSH and pings'
+-----------------+---------------------------------------------------------------------------------+
| Field           | Value                                                                           |
+-----------------+---------------------------------------------------------------------------------+
| created_at      | None                                                                            |
| description     | Allow SSH and pings                                                             |
| id              |-a0ef-4c93-b768-d11d1027ccce                                                     |
| name            | BasicSG                                                                         |
| project_id      | p9sidfd7ad72543be89f9d54f8311ad9e                                               |
| revision_number | None                                                                            |
| rules           | direction='egress', ethertype='IPv4', id='37f9-47c9-b44c-58ec6ec6c36a'          |
|                 | direction='egress', ethertype='IPv6', id='4783-43d7-b5ce-38dc68ece10d'          |
| updated_at      | None                                                                            |
+-----------------+---------------------------------------------------------------------------------+

- Add rules to allow ssh

$ openstack security group rule create BasicSG --proto tcp --dst-port 22:22

+-------------------+--------------------------------------+
| Field             | Value                                |
+-------------------+--------------------------------------+
| created_at        | None                                 |
| description       | None                                 |
| direction         | ingress                              |
| ether_type        | IPv4                                 |
| id                | ccfe-4681-8db0-85e0bfb0c18b          |
| name              | None                                 |
| port_range_max    | 22                                   |
| port_range_min    | 22                                   |
| project_id        | sdfsfsd72543be89f9d54f8311ad9e       |
| protocol          | tcp                                  |
| remote_group_id   | None                                 |
| remote_ip_prefix  | 0.0.0.0/0                            |
| revision_number   | None                                 |
| security_group_id | a0ef-4c93-b768-d11d1027ccce          |
| updated_at        | None                                 |
+-------------------+--------------------------------------+

- Add rules to allow ping

NOTE: Port '-1' means all ports?

$ openstack security group rule create BasicSG --proto icmp --dst-port -1
+-------------------+--------------------------------------+
| Field             | Value                                |
+-------------------+--------------------------------------+
| created_at        | None                                 |
| description       | None                                 |
| direction         | ingress                              |
| ether_type        | IPv4                                 |
| id                | a29a-481b-a78c-296494d21c45          |  
| name              | None                                 |
| port_range_max    | None                                 |
| port_range_min    | None                                 |
| project_id        | 098sdfs7ad72543be89f9d54f8311ad9e    |
| protocol          | icmp                                 |
| remote_group_id   | None                                 |
| remote_ip_prefix  | 0.0.0.0/0                            |
| revision_number   | None                                 |
| security_group_id | a0ef-4c93-b768-d11d1027ccce          |
| updated_at        | None                                 |
+-------------------+--------------------------------------+

--------------------------------------
Create a Internal-Only Security Group
--------------------------------------
This will be used to communicate within the intenal network 'mynetwork'
One cannot logon directly to the VM's bound to this security group

Direction  Ether Type  IP Protocol  Port Range  Remote IP Prefix
Ingress	IPv4	TCP	1 - 65535	192.168.10.0/24
Egress	IPv6	Any	Any	::/0
Egress	IPv4	Any	Any	0.0.0.0/0

- CREATE SECURITY GROUP
$ openstack security group create OpenSG --description "All TCP internal"

- ADD RULE
$ openstack security group rule create OpenSG --proto tcp --dst-port 1:65535 --src-ip 192.168.10.0/24
NOTE:  The --src-ip option is deprecated, please use --remote-ip instead.

