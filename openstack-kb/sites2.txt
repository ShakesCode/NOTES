TOOLING
heat
keystone
nova

Official name			Code name
Identity Service		keystone
Image Service		glance
Compute Service		nova
Networking Service		quantum
Block Storage Service	cinder
Object Storage Service	swift

COMPONENTS
vm image
vm
storage
memory
network
segmented network
load balancer

ACTIONS
provision - storage, network, vm, memory, redis, redis security
backup

OPENSTACK API DOCS
https://developer.openstack.org/api-guide/quick-start/
https://developer.openstack.org/api-ref/compute/
https://docs.openstack.org/nova/latest/user/placement.html
https://docs.openstack.org/python-cinderclient/latest/ —> PYTHON API


OPENSTACK WITH ANSIBLE - DEPLOYMENT AUTIOMATION EXAMPLE
GOOD  - https://keithtenzer.com/2016/05/09/openstack-heat-and-ansible-automation-born-in-the-cloud/

GOOD - http://redhatstackblog.redhat.com/2016/10/13/full-stack-automation-with-ansible-and-openstack/  —> with Ansible

Even though Heat is very useful, some people may prefer to learn Ansible to do their workload orchestration, as it offers a common language to define and automate the full stack of I.T. resources. I hope this article has provided you with a practical example, with a very basic use case for Ansible to launch OpenStack resources. If you are interested in trying Ansible and Ansible Tower, please visit https://www.ansible.com/openstack. A good starting point would be connecting Heat with Ansible Tower callbacks, as described in this other blog post
The Ansible team recognized that and leveraged Shade, the official library from the OpenStack project, to build interfaces to OpenStack APIs. At the time of this writing, Ansible 2.2 includes modules to call the following APIs

Keystone: users, groups, roles, projects
Nova: servers, keypairs, security-groups, flavors
Neutron: ports, network, subnets, routers, floating IPs
Ironic: nodes, introspection
Swift Objects
Cinder volumes
Glance images
Comparison with OpenStack Heat
Using Ansible instead of Heat has it’s advantages and disadvantages. For instance, with Ansible you must keep track of the resources you create, and manually delete them (in reverse order) once you are done with them. This is especially tricky with Neutron ports, floating IPs and routers. With Heat, you just delete the stack, and all the created resources will be properly deleted.


Openstack
Heat
Ansible Tower (like chef server)
Ansible

Through callbacks we can trigger Ansible playbook runs from within OpenStack Heat. Ansible Tower dynamically discovers instances running on OpenStack as Heat provisions them. Ansible Tower is then able to run playbooks against newly provisioned instances dynamically. 

PYTHON API FOR OPENSTACK
GOOD  - https://www.ibm.com/developerworks/cloud/library/cl-openstack-pythonapis/index.html 
https://docs.openstack.org/python-cinderclient/latest/

For all work in the following:
Official name			Code name
Identity Service		keystone
Image Service		glance
Compute Service		nova
Networking Service		quantum
Block Storage Service	cinder
Object Storage Service	swiftly

OPENSTACK API TUTORIAL/INTRO
https://www.linux.com/learn/introduction-openstack-api
http://events.linuxfoundation.org/sites/events/files/slides/CloudOpenEU2014_oomichi_20141009-01.pdf

AUTOMATIC PROVISIONING - CLOUD INIT
https://raymii.org/s/tutorials/Automating_Openstack_with_Cloud_init_run_a_script_on_VMs_first_boot.html
https://www.juniper.net/documentation/en_US/vsrx/topics/task/configuration/security-vsrx-cloud-init-support.html

AUTOMATIC PROVISIONING
https://www.mirantis.com/blog/now-zero-openstack-hosted-website-4-easy-steps/  —> with Mirantis 
CHEF PROVISIONING
https://www.tikalk.com/devops/openstack-chef-provisioning/
https://wiki.openstack.org/wiki/Chef  (chef-openstack)  (OBSOLETE??)
