https://www.3pillarglobal.com/insights/building-a-microservice-architecture-with-spring-boot-and-docker-part-ii

Docker-level commands:

docker ps
This command will list all running containers, showing information on them including their ID, name, base image name, and port forwarding.

docker build
This command is used to define a container — it processes the Dockerfile and creates a new container definition. We’ll use this to define our microservice containers.

docker pull [image name]
This command pulls the container image from the remote repository and stores the definition locally.

docker run
This command starts a container based on a local or remote (e.g. DockerHub) container definition. We’ll go into this one quite a bit.

docker push
This command publishes a built container definition to a repository, typically DockerHub.

Container-specific commands

These commands take either a container ID or container Name as a parameter:

docker stats [container name/ID] [container name/ID]
This command will show the current load on each container specified – it will show CPU%, memory usage, and network traffic.

docker logs [-f] [container name/ID]
This command shows the latest output from the container. The -f option “follows” the output, much like a console “tail-f” command would.

docker inspect [container name/ID]
This command dumps all of the configuration information on the container in JSON format.

docker port [container name/ID]
This command shows all of the port forwarding between the container host and the container.

docker exec [-i] [-t] [container name/ID]
This command executes a command on the target container (-i indicates to run interactively, -t is pseudo-tty). This command is very commonly used to get a container shell:
docker exec -it [container name/ID] sh

Once we understand this reference material, we can move onto standing up a Mongo container.

It’s as simple as: docker run -P -d --name mongodb mongo

