====================================================
CREATE A POSTGRES CONTAINER FROM A BASE UBUNTU IMAGE
====================================================
https://www.postgresql.org/download/linux/ubuntu/
https://docs.docker.com/engine/examples/postgresql_service/

See REFERENCE section for postgres install steps for Ubuntu

For apt-get install issue - http://stackoverflow.com/questions/27273412/cannot-install-packages-inside-docker-ubuntu-image

More methods for postgres container:
https://github.com/sameersbn/docker-postgresql
https://zaiste.net/2013/08/docker_postgresql_how_to/

======================================
PULL UBUNTU 16.04 IMAGE
======================================
$ docker pull ubuntu:16.04

======================================
BUILD POSTGRES IMAGE
======================================
https://docs.docker.com/engine/examples/postgresql_service/

-------------------------------
Dockerfile 
-------------------------------
Installs prerequisite software
Installs keys to the postgres repo (this actually failed - see notes below)
Installs postgres server, client and contrib
Starts postgres
Creates a superuser called docker with password docker

NOTE - this image actually has a 'running' postgres instance - though as an image it wont be really 'running'
      --> when a container is created using this image, postgres instance will be actually 'running' in it already

Note apt-get -qq update --> this is necessary to create a package list  first
Note install wget --> because the base image does not have wget
Note - the postgres site says add keys with the following command
wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | \
  sudo apt-key add -
sudo apt-get update

However, that exact thing fails for both wget+apt-key part.
Therefore, commented that line and retained only apt-get update
--> this needed modification with --allow-unauthenticated in the line that installs postgres, python etc

----------------------
Dockerfile contents
----------------------
#
# example Dockerfile for https://docs.docker.com/examples/postgresql_service/
#

FROM ubuntu:16.04
#MAINTAINER SvenDowideit@docker.com

# added
#RUN apt-get install wget
RUN apt-get -qq update
RUN apt-get -y install wget

# Add the PostgreSQL PGP key to verify their Debian packages.
# It should be the same key as https://www.postgresql.org/media/keys/ACCC4CF8.asc
#
# Old
#RUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8
# Latest from Postgres site for Ubuntu 16.04 - https://www.postgresql.org/download/linux/ubuntu/
#RUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8
#RUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
RUN apt-get update
#RUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - apt-get update

# Add PostgreSQL's repository. It contains the most recent stable release
#     of PostgreSQL, ``9.6``.
#
# Old for 'precise' ubuntu 12.04 version
#RUN echo "deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main" > /etc/apt/sources.list.d/pgdg.list
# Latest from Postgres site for Ubuntu 16.04 - https://www.postgresql.org/download/linux/ubuntu/
RUN echo "deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main" > /etc/apt/sources.list.d/pgdg.list

# Install ``python-software-properties``, ``software-properties-common`` and PostgreSQL 9.6
#  There are some warnings (in red) that show up during the build. You can hide
#  them by prefixing each apt-get statement with DEBIAN_FRONTEND=noninteractive
#RUN apt-get update && apt-get install -y python-software-properties software-properties-common postgresql-9.6 postgresql-client-9.6 postgresql-contrib-9.6
RUN apt-get update && apt-get install -y --allow-unauthenticated python-software-properties software-properties-common postgresql-9.6 postgresql-client-9.6 postgresql-contrib-9.6

# Note: The official Debian and Ubuntu images automatically ``apt-get clean``
# after each ``apt-get``

# Run the rest of the commands as the ``postgres`` user created by the ``postgres-9.6`` package when it was ``apt-get installed``
USER postgres

# Create a PostgreSQL role named ``docker`` with ``docker`` as the password and
# then create a database `docker` owned by the ``docker`` role.
# Note: here we use ``&&\`` to run commands one after the other - the ``\``
#       allows the RUN command to span multiple lines.
RUN    /etc/init.d/postgresql start &&\
    psql --command "CREATE USER docker WITH SUPERUSER PASSWORD 'docker';" &&\
    createdb -O docker docker

# Adjust PostgreSQL configuration so that remote connections to the
# database are possible.
RUN echo "host all  all    0.0.0.0/0  md5" >> /etc/postgresql/9.6/main/pg_hba.conf

# And add ``listen_addresses`` to ``/etc/postgresql/9.6/main/postgresql.conf``
RUN echo "listen_addresses='*'" >> /etc/postgresql/9.6/main/postgresql.conf

# Expose the PostgreSQL port
EXPOSE 5432

# Add VOLUMEs to allow backup of config, logs and databases
VOLUME  ["/etc/postgresql", "/var/log/postgresql", "/var/lib/postgresql"]

# Set the default command to run when starting the container
CMD ["/usr/lib/postgresql/9.6/bin/postgres", "-D", "/var/lib/postgresql/9.6/main", "-c", "config_file=/etc/postgresql/9.6/main/postgresql.conf"]

--------------------------------
BUILD the image  'eg_postgresql'
--------------------------------
docker build -t eg_postgresql .

------------------------
SCREEN OUTPUT - main configuration parts
------------------------
Step 8 : RUN /etc/init.d/postgresql start &&    psql --command "CREATE USER docker WITH SUPERUSER PASSWORD 'docker';" &&    createdb -O docker docker
 ---> Running in 9710b82f6bae
 * Starting PostgreSQL 9.6 database server
   ...done.
CREATE ROLE
 ---> 4359bb92e60f
Removing intermediate container 9710b82f6bae
Step 9 : RUN echo "host all  all    0.0.0.0/0  md5" >> /etc/postgresql/9.6/main/pg_hba.conf
 ---> Running in 356df5b1b85c
 ---> 65c379cb6d39
Removing intermediate container 356df5b1b85c
Step 10 : RUN echo "listen_addresses='*'" >> /etc/postgresql/9.6/main/postgresql.conf
 ---> Running in cc697472f895
 ---> f790933408e4
Removing intermediate container cc697472f895
Step 11 : EXPOSE 5432
 ---> Running in df937b71c612
 ---> 712b55fb908a
Removing intermediate container df937b71c612
Step 12 : VOLUME /etc/postgresql /var/log/postgresql /var/lib/postgresql
 ---> Running in 4a066bbcb142
 ---> 5bb073f2afc6
Removing intermediate container 4a066bbcb142
Step 13 : CMD /usr/lib/postgresql/9.6/bin/postgres -D /var/lib/postgresql/9.6/main -c config_file=/etc/postgresql/9.6/main/postgresql.conf
 ---> Running in f4b0d481ff18
 ---> 2d048f6340e2
Removing intermediate container f4b0d481ff18
Successfully built 2d048f6340e2

----------------------
VERIFY IMAGE IS CREATED OR NOT
----------------------
$ docker  images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
eg_postgresql       latest              2d048f6340e2        9 minutes ago       403.2 MB

===========================================
RUN IN FOREGROUND
===========================================
Note that this seems to start the instance at the time of invocation, 
--> and upon control-c it stops the instance and then the container.
      
$ docker run --rm -P --name pg_test eg_postgresql

[docker@oralx0001 postgres1]$ docker run --rm -P --name pg_test eg_postgresql
2016-11-25 10:35:23 UTC [5-1] LOG:  database system was interrupted; last known up at 2016-11-25 10:23:44 UTC
2016-11-25 10:35:23 UTC [5-2] LOG:  database system was not properly shut down; automatic recovery in progress
2016-11-25 10:35:23 UTC [5-3] LOG:  redo starts at 0/14EE858
2016-11-25 10:35:23 UTC [5-4] LOG:  invalid record length at 0/14EE880: wanted 24, got 0
2016-11-25 10:35:23 UTC [5-5] LOG:  redo done at 0/14EE858
2016-11-25 10:35:23 UTC [5-6] LOG:  last completed transaction was at log time 2016-11-25 10:23:44.937805+00
2016-11-25 10:35:23 UTC [5-7] LOG:  MultiXact member wraparound protections are now enabled
2016-11-25 10:35:23 UTC [1-1] LOG:  database system is ready to accept connections
2016-11-25 10:35:23 UTC [9-1] LOG:  autovacuum launcher started

^C

2016-11-25 10:36:06 UTC [1-2] LOG:  received fast shutdown request
2016-11-25 10:36:06 UTC [1-3] LOG:  aborting any active transactions
2016-11-25 10:36:06 UTC [9-2] LOG:  autovacuum launcher shutting down
2016-11-25 10:36:06 UTC [6-1] LOG:  shutting down
2016-11-25 10:36:06 UTC [1-4] LOG:  database system is shut down

======================================
RUN A CONTAINER AS A DAEMON
======================================
https://hub.docker.com/_/postgres/
NOTE: for the image from  the hub, this is how to run a container some-postgres from image postgres:
            $ docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d postgres

- Without port forwarding:
$ docker run --name pg_test -d eg_postgresql

$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
94ca468576de        eg_postgresql       "/usr/lib/postgresql/"   5 seconds ago       Up 4 seconds        5432/tcp            pg_test

- With port forwarding:
$ docker run --name pg_test -P -d eg_postgresql

$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                     NAMES
2e0c81ee7652        eg_postgresql       "/usr/lib/postgresql/"   5 seconds ago       Up 3 seconds        0.0.0.0:32779->5432/tcp   pg_test

------------------------------------
CONNECT TO POSTGRES IN THE CONTAINER
------------------------------------
- Get the IP of the container using 'docker network inspect bridge'
IP = 172.17.0.3

- Port is exposed in Dockerfile
EXPOSE 5432

- ------------------------------------------------------------------------------------------------
- Connect using 'psql' installed in the image - through another container using the same image (not the psql on the host/client)
- ------------------------------------------------------------------------------------------------
NOTE: This 'run' command actually creates another temporary container using the same image as the postgres container we have already.
      The --rm option removes that temporary container upon completion of the work.
      THE REASON to do this way is just this - we need psql and the image has it - so, spawn a temporary container just to use psql.
      --> If psql is there on your host or other app server, then you dont need this method
      NOTE: The 'link' directive exposes the running container to this temporary container to access 
                  - so we wont need IP of the running container for the temporary container to connect

From the website, generic command:
$ docker run -it --rm --link some-postgres:postgres postgres psql -h postgres -U postgres
Explained:
$ docker run -it -rm --link <container>:<alias> <image> psql -h <alias> -U <postgres user>

Specific command used:
$ docker run -it --rm --link pg_test:pg eg_postgresql psql -h pg -U docker
Password for user docker:
docker=# 

- Stop the container and try connecting in stopped state
$ docker stop pg_test
pg_test

$ docker run -it --rm --link pg_test:pg eg_postgresql psql -h pg -U docker
docker: Error response from daemon: Cannot link to a non running container: /pg_test AS /determined_curie/pg.

- ------------------------------------------------------------------------------------------------
- Connect using 'psql' installed on the host/client
- ------------------------------------------------------------------------------------------------
NOTE: This method requires psql of postgres available on the host machine

- Using forwarded port and localhost of the host (Option -d is to denote postgres database name - not docker daemon)
$ psql -h localhost -p 32779 -d docker -U docker --password
Password for user docker: <password was earlier set as 'docker' in Dockerfile>
docker=#

- Using IP and port of the container
$ psql -h 172.17.0.3 -p 5432 -d docker -U docker --password
Password for user docker: <password was earlier set as 'docker' in Dockerfile>
docker=#

------------------
REFERENCE - CONTAINER LINKING
------------------
$ docker run --rm -t -i --link pg_test:pg eg_postgresql bash
postgres@a3972f70644f:/$ hostname
a3972f70644f
postgres@a3972f70644f:/$ echo $PG_PORT_5432_TCP_ADDR
172.17.0.3
postgres@a3972f70644f:/$ echo $PG_PORT_5432_TCP_PORT
5432

======================================
REFERENCE - POSTGRES INSTALL STEPS 
======================================
https://www.postgresql.org/download/linux/ubuntu/
Linux downloads (Ubuntu)
PostgreSQL is available in all Ubuntu versions by default. However, Ubuntu "snapshots" a specific version of PostgreSQL that is then supported throughout the lifetime of that Ubuntu version. Other versions of PostgreSQL are available through the PostgreSQL apt repository.

Included in distribution

Ubuntu includes PostgreSQL by default. To install PostgreSQL on Ubuntu, use the apt-get (or other apt-driving) command:

apt-get install postgresql-9.4
The repository contains many different packages including third party addons. The most common and important packages are (substitute the version number as required):

postgresql-client-9.4 - client libraries and client binaries
postgresql-9.4 - core database server
postgresql-contrib-9.4 - additional supplied modules
libpq-dev - libraries and headers for C language frontend development
postgresql-server-dev-9.4 - libraries and headers for C language backend development
pgadmin3 - pgAdmin III graphical administration utility
PostgreSQL Apt Repository

If the version included in your version of Ubuntu is not the one you want, you can use the PostgreSQL Apt Repository. This repository will integrate with your normal systems and patch management, and provide automatic updates for all supported versions of PostgreSQL throughout the support lifetime of PostgreSQL.

The PostgreSQL apt repository supports LTS versions of Ubuntu (12.04, 14.04 and 16.04) on amd64 and i386 architectures as well as select non-LTS versions(15.10). While not fully supported, the packages often work on other non-LTS versions as well, by using the closest LTS version available.

To use the apt repository, follow these steps:


Create the file /etc/apt/sources.list.d/pgdg.list, and add a line for the repository
deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main
Import the repository signing key, and update the package lists
wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | \
  sudo apt-key add -
sudo apt-get update
For more information about the apt repository, including answers to frequent questions, please see the apt page on the wiki.

Cross distribution packages

Generic RPM and DEB packages that provide a server-only distribution are avaliable for some 32 and 64-bit Linux distributions. 
These packages provide a single set of binaries and consistent packaging across different Linux distributions. They are designed for server installation where a GUI is not available and consistency across multiple distributions is a requirement.

Download the packages from BigSQL for all supported versions.

Note: The cross distribution packages do not fully integrate with the platform-specific packaging systems.

Interactive installer by EnterpriseDB

Download the installer certified by EnterpriseDB for all supported PostgreSQL versions.

This installer includes the PostgreSQL server, pgAdmin; a graphical tool for managing and developing your databases, 
and StackBuilder; a package manager that can be used to download and install additional PostgreSQL tools and drivers. 
Stackbuilder includes management, integration, migration, replication, geospatial, connectors and other tools.

This installer can run in graphical, command line, or silent install modes.

The installer is designed to be a straightforward, fast way to get up and running with PostgreSQL on Linux (Red Hat family 
Linux including CentOS/Fedora/Scientific/Oracle variants), Debian GNU/Linux and derivatives, Ubuntu Linux and derivatives, 
SuSE and OpenSuSE.

Advanced users can also download a tar.gz archive of the binaries, without the installer. This download is intended for users 
who wish to include PostgreSQL as part of another application installer.

Note: The installers do not integrate with platform-specific packaging systems.

Build from source

The source code can be found in the main file browser. Instructions for building from source can be found in the documentation.
