============================================
DOCKER NETWORKING
============================================
How to persist IP of a container
How to persist forward port of a container

How to expose a container port to host
How to expose a container port to world outside the host
How to give container a fully external IP - like internet IP

How to make containers talk to each other

How to segment containers networks
How to set firewall rules in containers

https://docs.docker.com/engine/tutorials/networkingcontainers/

https://docs.docker.com/engine/userguide/networking/
https://docs.docker.com/engine/userguide/networking/default_network/binding/

===========================
COMMANDS SUMMARY
===========================
docker network create
docker network connect
docker network ls
docker network rm
docker network disconnect
docker network inspect

================================
NETWORKS - VERY BASIC
================================
----------------------
- Netowrks available
----------------------
NOTE: Bridged is the default network Docker assigns to a container - unless specified otherwise

$ docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
683c712e106b        bridge              bridge              local
4874820c7332        host                host                local
1913d82d6a4f        none                null                local

--------------------------------------
- List ports of running containers
--------------------------------------
NOTE: Some of them has port forwarded

$ docker port pg_test2
5432/tcp -> 127.0.0.1:30001

$ docker port pg_test
5432/tcp -> 0.0.0.0:32796

$ docker ps
CONTAINER ID  IMAGE               COMMAND                  CREATED             STATUS              PORTS                       NAMES
777e110fcd76  eg_postgresql       "/usr/lib/postgresql/"   20 minutes ago      Up 20 minutes       127.0.0.1:30001->5432/tcp   pg_test2
6bc771f8c3dc  eg_postgresql       "/usr/lib/postgresql/"   11 days ago         Up 11 days          0.0.0.0:32796->5432/tcp     pg_test

------------------------
- Networks by containers
------------------------
$ docker network inspect bridge
[
    {
        "Name": "bridge",
        "Id": "683c712e106b89ec844beb9f6848d2ac7d1523951b86acb4dcadc4284f9e52a4",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": null,
            "Config": [
                {
                    "Subnet": "172.17.0.0/16",
                    "Gateway": "172.17.0.1"
                }
            ]
        },
        "Internal": false,
        "Containers": {
            "6bc771f8c3dcbc1314ba0190811e504206af41fdda8f666fe5cee0d178203d20": {
                "Name": "pg_test",
                "EndpointID": "e49fa37347adb4ba33f58d4bc9dc8db01fb545be88cb168778a7fd8c4a1614fe",
                "MacAddress": "02:42:ac:11:00:03",
                "IPv4Address": "172.17.0.3/16",
                "IPv6Address": ""
            },
            "997af6789cb843694c0e0293a45e5e19083dcb3e45f4737fd8a82095d5b94248": {
                "Name": "postgres1",
                "EndpointID": "d7d97f89a2450118ddabf40208d9a964967bd62f8d2e1c2b4b35f2be3c448565",
                "MacAddress": "02:42:ac:11:00:02",
                "IPv4Address": "172.17.0.2/16",
                "IPv6Address": ""
            }
        },
        "Options": {
            "com.docker.network.bridge.default_bridge": "true",
            "com.docker.network.bridge.enable_icc": "true",
            "com.docker.network.bridge.enable_ip_masquerade": "true",
            "com.docker.network.bridge.host_binding_ipv4": "0.0.0.0",
            "com.docker.network.bridge.name": "docker0",
            "com.docker.network.driver.mtu": "1500"
        },
        "Labels": {}
    }
]

------------------------------------------------------------------
- Disconnect and connect a container to a network
------------------------------------------------------------------
$ docker network disconnect bridge postgres1
$ docker network connect bridge postgres1

=========================
CREATE A BRIDGED NETWORK (without specific subnet - Docker assigns a subnet by itself)
=========================
$ docker network create -d bridge my-bridge-network

-- No containers in this network yet
$ docker network inspect my-bridge-network
[
    {
        "Name": "my-bridge-network",
        "Id": "0469b6f22a60b58143a07d2fbce9e85b2ed7a4cea4943bde9cd763da534da9dd",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": {},
            "Config": [
                {
                    "Subnet": "172.18.0.0/16",
                    "Gateway": "172.18.0.1/16"
                }
            ]
        },
        "Internal": false,
        "Containers": {},
        "Options": {},
        "Labels": {}
    }
]

- Add containers to this new network
$ docker network connect my-bridge-network postgres1

-- Assigning specific network during create time
$ docker run -d --network=my-bridge-network --name db postgres2

-- Verify containers assigned to the new network
$ docker network inspect my-bridge-network
[
    {
        "Name": "my-bridge-network",
        "Id": "0469b6f22a60b58143a07d2fbce9e85b2ed7a4cea4943bde9cd763da534da9dd",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": {},
            "Config": [
                {
                    "Subnet": "172.18.0.0/16",
                    "Gateway": "172.18.0.1/16"
                }
            ]
        },
        "Internal": false,
        "Containers": {
            "997af6789cb843694c0e0293a45e5e19083dcb3e45f4737fd8a82095d5b94248": {
                "Name": "postgres1",
                "EndpointID": "b6ead86cacfead1129235a1f41976c457811ecb1104dbdc13e3ac2cbc1dceb61",
                "MacAddress": "02:42:ac:12:00:02",
                "IPv4Address": "172.18.0.2/16",
                "IPv6Address": ""
            },
            "d322168790fd17428a12ea39a4a7b0413197d55311d7861bc2c389d809ce3827": {
                "Name": "postgres2",
                "EndpointID": "41d9783e05f5d5587959f18cf4e9cb5a894a53bd58aef0c300eb5a2fa08032e7",
                "MacAddress": "02:42:ac:12:00:03",
                "IPv4Address": "172.18.0.3/16",
                "IPv6Address": ""
            }
        },
        "Options": {},
        "Labels": {}
    }
]

-- Verify containers connected to the original 'bridge' network
NOTE: The container postgres1 is assinged to both the original bridge and the new network

        "Internal": false,
        "Containers": {
            "6bc771f8c3dcbc1314ba0190811e504206af41fdda8f666fe5cee0d178203d20": {
                "Name": "pg_test",
                "EndpointID": "e49fa37347adb4ba33f58d4bc9dc8db01fb545be88cb168778a7fd8c4a1614fe",
                "MacAddress": "02:42:ac:11:00:03",
                "IPv4Address": "172.17.0.3/16",
                "IPv6Address": ""
            },
            "997af6789cb843694c0e0293a45e5e19083dcb3e45f4737fd8a82095d5b94248": {
                "Name": "postgres1",
                "EndpointID": "5765bd07e515c728715f640085fd8d13fce9025eb7b5cb5d8653c952efb3e1a9",
                "MacAddress": "02:42:ac:11:00:02",
                "IPv4Address": "172.17.0.2/16",
                "IPv6Address": ""
            }
        },

=========================
CREATE A BRIDGED NETWORK (with specific subnet)
=========================
$ docker network create -d bridge --subnet 172.25.0.0/16 mybridge2

==============================================
ASSIGN SPECIFIC NETWORK AND IP TO A CONTAINER
==============================================
NOTE: Better define a custom network and assign custom IPs of that network to containers so that container IP is same always

---------------------------------------------------
ASSIGN SPECIFIC NETWORK WHILE CREATING A CONTAINER
---------------------------------------------------
- Create the container connecting it to custom network and custom IP
$ docker run --network=mybridge2 --ip=172.25.3.10 -itd --name=pg_test2 eg_postgresql

-- Verify IP
$ docker inspect pg_test2|grep IPAdd
            "SecondaryIPAddresses": null,
            "IPAddress": "",
                    "IPAddress": "172.25.3.10",
            
- Connect the container to the default bridged network also
$ docker network connect bridge pg_test2

-- Verify IP
NOTE: You will find two IPs - one each of custom and default networks
$ docker inspect pg_test2|grep IPAdd
            "SecondaryIPAddresses": null,
            "IPAddress": "172.17.0.2",
                    "IPAddress": "172.17.0.2",
                    "IPAddress": "172.25.3.10",

- THIS FAILS - Connect the container to the default bridged network, but with custom IP of its subnet
-- First disconnect from bridge network (if connected already)
$ docker network disconnect bridge pg_test2

-- Connect the container with a custom IP of the default bridge network
$ docker network connect bridge --ip=172.17.10.10  pg_test2
Error response from daemon: User specified IP address is supported on user defined networks only

------------------------------------------
ASSIGN SPECIFIC TO A RUNNING CONTAINER
------------------------------------------
- Connect a container to it (it can be already running container)
$ docker network connect mybridge2 pg_test

-- Verify
$ docker inspect pg_test |grep IPAddress
            "SecondaryIPAddresses": null,
            "IPAddress": "172.17.0.3",
                    "IPAddress": "172.17.0.3", --> default bridged network
                    "IPAddress": "172.25.0.2", --> custom mybridge2 network, with auto-increment-generated IP

- Disconnect the container from a network
$ docker network disconnect mybridge2 pg_test

-- Verify
$ docker inspect pg_test|grep IPAddress
            "SecondaryIPAddresses": null,
            "IPAddress": "172.17.0.3",
                    "IPAddress": "172.17.0.3",

- Connect a container giving a specific IP to assign
$ docker network connect mybridge2 --ip=172.25.3.3  pg_test

-- Verify
$ docker inspect pg_test|grep IPAddress
            "SecondaryIPAddresses": null,
            "IPAddress": "172.17.0.3",
                    "IPAddress": "172.17.0.3",
                    "IPAddress": "172.25.3.3",

-----------------------------------------------------------------------------------------------
CONNECTING TO THE LISTENING PROCESS IN THE CONTAINER - USING EACH IP ASSIGNED TO THE CONTAINER
-----------------------------------------------------------------------------------------------
NOTE: The listening process could be a database like postgres, or web server like Nginx etc.

$ psql -h 172.17.0.2 -p 5432 -U docker --password
Password for user docker:
docker=# 

$ psql -h 172.25.3.10 -p 5432 -U docker --password
Password for user docker:
docker=#

================================
CONNECTING BETWEEN CONTAINERS
================================
- Setup
postgres1 and pg_test are in bridge network (172.17.x.x)
postgres1 and postgres2 are in my-bridge-network (172.18.x.x) (postgres1 in both networks)

- IPs
pg_test   172.17.0.3
postgres1 172.17.0.2 --> bridge
postgres1 172.18.0.2 --> my-bridge-network
postgres2 172.18.0.3

- Connect to one container
$ docker exec -it postgres2 bash

- Try ping other container from that container
-- Does not connect across network domains
root@0b6feebdaacc:/# ping 172.17.0.2
PING 172.17.0.2 (172.17.0.2): 56 data bytes
^C--- 172.17.0.2 ping statistics ---
13 packets transmitted, 0 packets received, 100% packet loss

-- Connects within the same domain
root@0b6feebdaacc:/# ping 172.18.0.2
PING 172.18.0.2 (172.18.0.2): 56 data bytes
64 bytes from 172.18.0.2: icmp_seq=0 ttl=64 time=0.112 ms
64 bytes from 172.18.0.2: icmp_seq=1 ttl=64 time=0.081 ms
64 bytes from 172.18.0.2: icmp_seq=2 ttl=64 time=0.077 ms
^C--- 172.18.0.2 ping statistics ---
3 packets transmitted, 3 packets received, 0% packet loss
round-trip min/avg/max/stddev = 0.077/0.090/0.112/0.000 ms

-- Connect to container using different IPs of the same container
--> Both these IPs connect - both belong to the same container postgres
$ psql -h 172.17.0.2 -p 5432 -U postgres --password
$ psql -h 172.18.0.2 -p 5432 -U docker --password

-- Connect using port forwarding
NOTE: Forwarding one port can be done using one network only - uses the network that is assigned first during container creation
---- start container as daemon with port forwarding
$ docker run --name postgres1 -P -d postgres
0830c4c8d88ec713bb1262dd0e50c67b68078c78661b5a1072eb8e8203d2124a
NOTE: This container connects to host with default bridge network

$ docker ps
CONTAINER ID   IMAGE               COMMAND                  CREATED             STATUS              PORTS                     NAMES
0830c4c8d88e   postgres            "/docker-entrypoint.s"   4 seconds ago       Up 3 seconds        0.0.0.0:32799->5432/tcp   postgres1
0b6feebdaacc   postgres            "/docker-entrypoint.s"   41 minutes ago      Up 41 minutes       0.0.0.0:32798->5432/tcp   postgres2
6bc771f8c3dc   eg_postgresql       "/usr/lib/postgresql/"   16 hours ago        Up 15 hours         0.0.0.0:32796->5432/tcp   pg_test

---- connect using the forwarded port
This does not ask for password
$ psql -h localhost -p 32799 -U postgres
postgres#

---- connect one more network to the same container
$ docker network connect  my-bridge-network postgres1

postgres - bridge - 172.17.0.2
postgres - my-network-bridge - 172.18.0.2

$ psql -h localhost -p 32799 -U postgres
NOTE: This uses either one of the IP if more than one network is assigned to the container
postgres#

---- Connect using one IP
$ psql -h 172.17.0.2 -p 5432 -U docker --password
Password for user docker:
docker=# \q

---- Connect using the other IP
$  psql -h 172.25.3.10 -p 5432 -U docker --password
Password for user docker:
docker=#


==========================
PORT FORWARDING
==========================
https://docs.docker.com/engine/userguide/networking/default_network/binding/
https://runnable.com/docker/binding-docker-ports

NOTE: This is possible only with 'run' command - that is, while creating a container
        If port or IP has to change, save the container as a new image and re-create the container with changes
        
-------------------------------------------------------
- Starting container with and without port forwarding
-------------------------------------------------------

-- Without port forwarding:
$ docker run --name <container name> -d <image name>
$ docker run --name pg_test -d eg_postgresql

-- With port forwarding: (-P for port forwarding)
$ docker run --name <container name> -P -d <image name>
$ docker run --name pg_test -P -d eg_postgresql

-- With specific ports: (-p (lowercase) for specific forwarding port mapping)
$ docker run --name pg_test2 -p 30001:5432 -d eg_postgresql

-- With specific ports and binding to specific host-IP (not container IP)
NOTE:  The command below also assigns a specific IP to the container (more on that further below in the document)
$ docker run --network=mybridge2 --ip=172.25.3.10 -p 127.0.0.1:30001:5432 --name pg_test2 -d eg_postgresql

        With this, you can connect to postgres in this container only with -h 127.0.0.1 and not with <host IP>
        
        This works:
        $ psql -h 127.0.0.1 -p 30001 -d docker -U docker --password
        - OR - 
        $ psql -h 127.0.0.1 -p 30001 -d docker -U docker --password
        
        This fails:
        $  psql -h 10.163.166.133 -p 30001 -d docker -U docker --password
        Password for user docker:
        psql: could not connect to server: Connection refused
                Is the server running on host "10.63.166.33" and accepting
                TCP/IP connections on port 30001?

-------------------------------------
LISTING THE PORTS USED BY CONTAINERS
-------------------------------------
$ docker port pg_test2
5432/tcp -> 127.0.0.1:30001

$ docker port pg_test
5432/tcp -> 0.0.0.0:32796

$ docker ps
CONTAINER ID  IMAGE               COMMAND                  CREATED             STATUS              PORTS                       NAMES
777e110fcd76  eg_postgresql       "/usr/lib/postgresql/"   20 minutes ago      Up 20 minutes       127.0.0.1:30001->5432/tcp   pg_test2
6bc771f8c3dc  eg_postgresql       "/usr/lib/postgresql/"   11 days ago         Up 11 days          0.0.0.0:32796->5432/tcp     pg_test


-------------------------------------
IPTABLES ENTRIES
-------------------------------------
# iptables -t nat -L -n

....
....
Chain DOCKER (2 references)
target     prot opt source               destination
RETURN     all  --  0.0.0.0/0            0.0.0.0/0
RETURN     all  --  0.0.0.0/0            0.0.0.0/0
RETURN     all  --  0.0.0.0/0            0.0.0.0/0
RETURN     all  --  0.0.0.0/0            0.0.0.0/0
DNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:32796 to:172.17.0.3:5432
DNAT       tcp  --  0.0.0.0/0            127.0.0.1            tcp dpt:30001 to:172.25.3.10:5432
....
....

=================================
EXPOSING A PORT
=================================
Ports of containers can be exposed only during creation time.

-----------------------
With -expose directive  (TBD)
-----------------------
$  docker run --name postgres3 -expose=22 -P -d postgres
50bd843a56769279f391f8358115183641e2c04a7e5d2b1aee1568465fc06d6c

NOTE- it is unclear if 22 was also mapped - we see only 5432 having been mapped below:
$ docker ps
CONTAINER ID        IMAGE     COMMAND                  CREATED             STATUS              PORTS                     NAMES
50bd843a5676        postgres  "/docker-entrypoint.s"   3 seconds ago       Up 2 seconds        0.0.0.0:32803->5432/tcp   postgres3
0830c4c8d88e        postgres  "/docker-entrypoint.s"   45 minutes ago      Up 45 minutes       0.0.0.0:32799->5432/tcp   postgres1
0b6feebdaacc        postgres  "/docker-entrypoint.s"   About an hour ago   Up About an hour    0.0.0.0:32798->5432/tcp   postgres2

$ docker inspect postgres3 
--> this shows container configuration
--> it is showing only 5432 as exposed as well as mapped port
--> unclear what happened to exposing 22

 "ExposedPorts": {
                "5432/tcp": {}
            },

 "Ports": {
                "5432/tcp": [
                    {
                        "HostIp": "0.0.0.0",
                        "HostPort": "32803"
                    }
                ]


===============================================
LIST NETWORKS
===============================================
$ docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
683c712e106b        bridge              bridge              local --> default created
9940dbc542a6        docker_gwbridge     bridge              local --> default created (TBD about this)
4874820c7332        host                host                local --> default created
1ss4axvskple        ingress             overlay             swarm --> default created
0469b6f22a60        my-bridge-network   bridge              local --> custom 
1913d82d6a4f        none                null                local --> default created




