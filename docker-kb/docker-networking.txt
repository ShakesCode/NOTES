============================================
DOCKER NETWORKING
============================================
How to persist IP of a container
How to expose a container to host
How to expose a container to world outside the host
How to make containers talk to each other
How to give container a fully external IP - like internet IP
How to segment containers networks
How to set firewall rules in containers

https://docs.docker.com/engine/tutorials/networkingcontainers/

==========================
BASICS
==========================
- Running containers
NOTE: One of them has port forwarded

$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                   NAMES
6bc771f8c3dc        eg_postgresql       "/usr/lib/postgresql/"   15 hours ago        Up 14 hours         0.0.0.0:32796->5432/tcp pg_test
997af6789cb8        postgres            "/docker-entrypoint.s"   45 hours ago        Up 45 hours         5432/tcp                postgres1

- Netowrks being used
NOTE: Bridged is the default network Docker assigns to a container - unless specified otherwise

$ docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
683c712e106b        bridge              bridge              local
4874820c7332        host                host                local
1913d82d6a4f        none                null                local

- Networks by containers
$ docker network inspect bridge
[
    {
        "Name": "bridge",
        "Id": "683c712e106b89ec844beb9f6848d2ac7d1523951b86acb4dcadc4284f9e52a4",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": null,
            "Config": [
                {
                    "Subnet": "172.17.0.0/16",
                    "Gateway": "172.17.0.1"
                }
            ]
        },
        "Internal": false,
        "Containers": {
            "6bc771f8c3dcbc1314ba0190811e504206af41fdda8f666fe5cee0d178203d20": {
                "Name": "pg_test",
                "EndpointID": "e49fa37347adb4ba33f58d4bc9dc8db01fb545be88cb168778a7fd8c4a1614fe",
                "MacAddress": "02:42:ac:11:00:03",
                "IPv4Address": "172.17.0.3/16",
                "IPv6Address": ""
            },
            "997af6789cb843694c0e0293a45e5e19083dcb3e45f4737fd8a82095d5b94248": {
                "Name": "postgres1",
                "EndpointID": "d7d97f89a2450118ddabf40208d9a964967bd62f8d2e1c2b4b35f2be3c448565",
                "MacAddress": "02:42:ac:11:00:02",
                "IPv4Address": "172.17.0.2/16",
                "IPv6Address": ""
            }
        },
        "Options": {
            "com.docker.network.bridge.default_bridge": "true",
            "com.docker.network.bridge.enable_icc": "true",
            "com.docker.network.bridge.enable_ip_masquerade": "true",
            "com.docker.network.bridge.host_binding_ipv4": "0.0.0.0",
            "com.docker.network.bridge.name": "docker0",
            "com.docker.network.driver.mtu": "1500"
        },
        "Labels": {}
    }
]

- Disconnect and connect a container to a network
$ docker network disconnect bridge postgres1
$ docker network connect bridge postgres1

- Create a network
$ docker network create -d bridge my-bridge-network

-- No containers in this network yet
$ docker network inspect my-bridge-network
[
    {
        "Name": "my-bridge-network",
        "Id": "0469b6f22a60b58143a07d2fbce9e85b2ed7a4cea4943bde9cd763da534da9dd",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": {},
            "Config": [
                {
                    "Subnet": "172.18.0.0/16",
                    "Gateway": "172.18.0.1/16"
                }
            ]
        },
        "Internal": false,
        "Containers": {},
        "Options": {},
        "Labels": {}
    }
]

- Add containers to this new network
$ docker network connect  my-bridge-network postgres1

-- Assigning specific network during create time
$ docker run -d --network=my-bridge-network --name db postgres2

-- Verify containers assigned to the new network
$ docker network inspect my-bridge-network
[
    {
        "Name": "my-bridge-network",
        "Id": "0469b6f22a60b58143a07d2fbce9e85b2ed7a4cea4943bde9cd763da534da9dd",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": {},
            "Config": [
                {
                    "Subnet": "172.18.0.0/16",
                    "Gateway": "172.18.0.1/16"
                }
            ]
        },
        "Internal": false,
        "Containers": {
            "997af6789cb843694c0e0293a45e5e19083dcb3e45f4737fd8a82095d5b94248": {
                "Name": "postgres1",
                "EndpointID": "b6ead86cacfead1129235a1f41976c457811ecb1104dbdc13e3ac2cbc1dceb61",
                "MacAddress": "02:42:ac:12:00:02",
                "IPv4Address": "172.18.0.2/16",
                "IPv6Address": ""
            },
            "d322168790fd17428a12ea39a4a7b0413197d55311d7861bc2c389d809ce3827": {
                "Name": "postgres2",
                "EndpointID": "41d9783e05f5d5587959f18cf4e9cb5a894a53bd58aef0c300eb5a2fa08032e7",
                "MacAddress": "02:42:ac:12:00:03",
                "IPv4Address": "172.18.0.3/16",
                "IPv6Address": ""
            }
        },
        "Options": {},
        "Labels": {}
    }
]

-- Verify containers connected to the original 'bridge' network
NOTE: The container postgres1 is assinged to both the original bridge and the new network

        "Internal": false,
        "Containers": {
            "6bc771f8c3dcbc1314ba0190811e504206af41fdda8f666fe5cee0d178203d20": {
                "Name": "pg_test",
                "EndpointID": "e49fa37347adb4ba33f58d4bc9dc8db01fb545be88cb168778a7fd8c4a1614fe",
                "MacAddress": "02:42:ac:11:00:03",
                "IPv4Address": "172.17.0.3/16",
                "IPv6Address": ""
            },
            "997af6789cb843694c0e0293a45e5e19083dcb3e45f4737fd8a82095d5b94248": {
                "Name": "postgres1",
                "EndpointID": "5765bd07e515c728715f640085fd8d13fce9025eb7b5cb5d8653c952efb3e1a9",
                "MacAddress": "02:42:ac:11:00:02",
                "IPv4Address": "172.17.0.2/16",
                "IPv6Address": ""
            }
        },

================================
CONNECTING BETWEEN CONTAINERS
================================

- Setup
postgres1 and pg_test are in bridge network (172.17.x.x)
postgres1 and postgres2 are in my-bridge-network (172.18.x.x) (postgres1 in both networks)

- IPs
pg_test   172.17.0.3
postgres1 172.17.0.2 --> bridge
postgres1 172.18.0.2 --> my-bridge-network
postgres2 172.18.0.3

- Connect between containers
$ docker exec -it postgres2 bash

-- Does not connect across network domains
root@0b6feebdaacc:/# ping 172.17.0.2
PING 172.17.0.2 (172.17.0.2): 56 data bytes
^C--- 172.17.0.2 ping statistics ---
13 packets transmitted, 0 packets received, 100% packet loss

-- Connects within the same domain
root@0b6feebdaacc:/# ping 172.18.0.2
PING 172.18.0.2 (172.18.0.2): 56 data bytes
64 bytes from 172.18.0.2: icmp_seq=0 ttl=64 time=0.112 ms
64 bytes from 172.18.0.2: icmp_seq=1 ttl=64 time=0.081 ms
64 bytes from 172.18.0.2: icmp_seq=2 ttl=64 time=0.077 ms
^C--- 172.18.0.2 ping statistics ---
3 packets transmitted, 3 packets received, 0% packet loss
round-trip min/avg/max/stddev = 0.077/0.090/0.112/0.000 ms

-- Connect to container using different IPs of the same container
--> Both these IPs connect - both belong to the same container postgres
$ psql -h 172.17.0.2 -p 5432 -U postgres --password
$ psql -h 172.18.0.2 -p 5432 -U docker --password
