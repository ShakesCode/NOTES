=====================================
REST API USING JERSEY-JAXRS FRAMEWORK
=====================================
Jersey2 and Tomcat8 - https://afsinka.wordpress.com/2015/12/27/restful-web-service-example-with-jersey-2-and-tomcat-8/

- Using Jersey-Maven archetypes itself
https://jersey.java.net/download.html

Chances are you are using Apache Maven as a build & dependency management tool for your project. 
If you do, there is a very easy and convenient way to start playing with Jersey 2.25.1 by generating 
the skeleton application from one of the Jersey 2 maven archetypes that we provide. 
For instance, to create a Jersey 2.25.1 application using the Grizzly 2 HTTP server container, use the following:

mvn archetype:generate -DarchetypeGroupId=org.glassfish.jersey.archetypes \
    -DarchetypeArtifactId=jersey-quickstart-grizzly2 -DarchetypeVersion=2.25.1
If you want to create a Servlet container deployable Jersey 2.25.1 web application instead, use

mvn archetype:generate -DarchetypeGroupId=org.glassfish.jersey.archetypes \
    -DarchetypeArtifactId=jersey-quickstart-webapp -DarchetypeVersion=2.25.1
    
    
- Maven users may also be interested in the list of all Jersey 2 modules and dependencies
https://jersey.java.net/documentation/latest/modules-and-dependencies.html

======================================
USING SPECIFIC MODULES (NOT ARCHETYPE)
======================================
https://jersey.java.net/documentation/latest/modules-and-dependencies.html

- Servlet based application on Glassfish

If you are using Glassfish application server, you don't need to package anything with your application, 
everything is already included. 
You just need to declare (provided) dependency on JAX-RS API to be able to compile your application.

<dependency>
    <groupId>javax.ws.rs</groupId>
    <artifactId>javax.ws.rs-api</artifactId>
    <version>2.0.1</version>
    <scope>provided</scope>
</dependency>

- Following dependencies apply to application server (servlet containers) without any integrated JAX-RS implementation. 
  Then application needs to include JAX-RS API and Jersey implementation in deployed application.

<dependency>
    <groupId>org.glassfish.jersey.containers</groupId>
    <!-- if your container implements Servlet API older than 3.0, use "jersey-container-servlet-core"  -->
    <artifactId>jersey-container-servlet</artifactId>
    <version>2.25.1</version>
</dependency>
<!-- Required only when you are using JAX-RS Client -->
<dependency>
    <groupId>org.glassfish.jersey.core</groupId>
    <artifactId>jersey-client</artifactId>
    <version>2.25.1</version>
</dependency>
