Data Guard 11g R2

Sites:
Cheat sheet - http://www.datadisk.co.uk/html_docs/oracle_dg/cheatsheet.htm
Remove DG configuration - http://www.mahir-quluzade.com/2012/07/oracle-data-guard-11g-how-to-safely.html
Remove DG configuration - (9i) http://www.oracledbasupport.co.uk/how-to-safely-remove-a-data-guard-broker-configuration-under-racnon-rac-setup-2/
DGMGRL interface commands - https://docs.oracle.com/cd/B28359_01/server.111/b28295/cli.htm

#----------------------------
# TO AVOID ISSUES DURING SETUP 
# --- DO THESE BEFOREHAND ---
#
# Create a fresh password file on primary node1
#  --> and copy that file by hand to primary and standby - all nodes
#
# Create the static entry in listener.ora and reload listener
#  --> On each node of primary and standby
#  -->--> for DB_UNIQUE_NAME - with SID relevant to the node
#  -->--> for DB_UNIQUE_NAME_DGMGRL - with SID relevant to the node
#
# Create the relevant TNS entry for DB_UNIQUE_NAME
# --> On each node of primary and standby
# -->--> For both primary and standby
# -->--> Pointing to the service DB_UNIQUE_NAME
#
# Enter SIDs in oratab
# --> On each node of primary and standby
# --> For the relevant SIDs
#----------------------------


Contents 
1. Prerequisites
2. Pre-Verification
3. DataGuard Configuration
4. Broker Configuration

Info:
DG log files are in background-dump-dest as drcSID.log

1. Prerequisites

This document is applicable for the below environment: 
Operating System: 
LinuxClusterware  : Grid Infrastructure Version 11gR2 with ASM 
instance.Database Version: 11gR2
Database Storage: ASM with OMF (Oracle Managed Files)

2. Pre-Verification

2.1. At Primary, Verify if Archiving/Force Logging is enabled. (prim-check-archlog-mode.sql)

 SQL> select NAME,LOG_MODE,FORCE_LOGGING from v$database;
 NAME          LOG_MODE     FOR
 -------      ----------    ---
 MYDB1      ARCHIVELOG    YES

2.2. At Primary, Get the DB Size. (prim-get-db-size.sql)
 SQL> select sum(BYTES)/1024/1024/1024 from dba_data_files;
 SUM(BYTES)/1024/1024/1024
 -------------------------
                3.12304688

2.3. At Standby, Get the Diskgroup Free Size.  (stby-dg-free-size.sql)
 SQL> select name,TOTAL_MB,USABLE_FILE_MB from v$asm_diskgroup;
 
 NAME                             TOTAL_MB     USABLE_FILE_MB
 ------------------------------ ---------- --------------
 DATA_DG01                       1060836         733104
 FRA_DG01                        1048552         943465

Verify if the USABLE_FILE_MB can accomodate the DB size checked in the step 1.2. 

2.4. Gather the following details and use these environment details appropriately. 
DB_NAME (This will be same for both primary and standby)

At Primary, DB_UNIQUE_NAME for primary, SID value for each node.
Physical Hostname of each node.Primary SCAN name and its port.

At Standby, DB_UNIQUE_NAME for standby, SID value for each node.
Physical Hostname of each node.Standby SCAN name and its port.

primary cluster 
db_name=
db_unique_name=
physical hosts=
scan name=
scan port=

standby cluster 
db_name=
db_unique_name=
physical hosts=
scan name=
scan port=

3. DataGuard Configuration

3.1. On both Primary & Standby sites on all the nodeâ€™s tnsnames.ora should have TNS entry for its DB_UNIQUE_NAME.(/usr/local/tns/tnsnames.ora ) 
 <Primary_DB_Unique_Name> =
     (DESCRIPTION =
         (ADDRESS = (PROTOCOL = TCP)(HOST = <Primary Scan Name> )(PORT = <Port>))
         (CONNECT_DATA =
               (SERVER=DEDICATED)
               (SERVICE_NAME = <Primary_DB_Unique_Name>)
         )
     )

 <Stby_DB_Unique_name> =
     (DESCRIPTION =
           (ADDRESS = (PROTOCOL = TCP)(HOST = <Standby Scan Name>)(PORT = <Port>))
           (CONNECT_DATA =
                 (SERVER=DEDICATED)
                 (SERVICE_NAME = <Stby_DB_Unique_name>)
           )
     )

3.2. At Primary, Create standby redo logs 

3.2.1 Gather the below details about Online Redo Log:  (prim-check-redo.sql)
 Check the Number of threads, and the Number of Groups per thread with the below SQL.
 
SQL> select thread#,groups from v$thread; Check the the Online Redo Log size.
SQL> select distinct BYTES from v$log;
SQL> select group#, thread# from v$log order by 1,2;
SQL> select group#, thread# from v$standby_log order by 1,2;

You should see something like this:
SQL> select thread#,groups from v$thread;

   THREAD#     GROUPS
---------- ----------
         1          2
         2          2

SQL>
SQL> select distinct BYTES from v$log;

     BYTES
----------
1073741824

SQL>
SQL> select group#, thread# from v$log order by 1,2;

    GROUP#    THREAD#
---------- ----------
         1          1
         2          1
         3          2
         4          2

SQL>
SQL> select group#, thread# from v$standby_log order by 1,2;

no rows selected

3.2.2 Create standby redo log:  (prim-add-stby-redo.sql)
 Standby redo log should have the same number of threads as that of Online Redo Log.
 Standby redo log should have one additional group per thread than the Online Redo Log's.
 Standby redo log size should be the same size as that of Online Redo Log Size

 Eg:- If  log size is 1073741824,  number of threads 2, and number of groups are two, then you will create standby logs as below:
 NOTE: This is just an example. You have to change it accordingly as per the environment as described above.

 ALTER DATABASE ADD STANDBY LOGFILE THREAD 1
 GROUP 101 SIZE 1073741824,
 GROUP 102 SIZE 1073741824,
 GROUP 103 SIZE 1073741824;
 
 ALTER DATABASE ADD STANDBY LOGFILE THREAD 2
 GROUP 201 SIZE 1073741824,
 GROUP 202 SIZE 1073741824,
 GROUP 203 SIZE 1073741824;
 
3.3. At Primary, set/modify the following parameters (prim-set-init-ora.sql)
 db_unique_name='<db_name>_site1'
 log_archive_config='dg_config=(<Primary_Unique_name>,<Stby_Unique_Name>)'
 log_archive_dest_1='LOCATION=USE_DB_RECOVERY_FILE_DEST VALID_FOR=(ALL_LOGFILES,ALL_ROLES) DB_UNIQUE_NAME=<Primary_unique_name>'
 log_archive_dest_2='SERVICE=<Stby_Unique_Name> LGWR  ASYNC  VALID_FOR=(ONLINE_LOGFILES,PRIMARY_ROLE)DB_UNIQUE_NAME=<Stby_Uniq_Name>'
 standby_file_management=AUTO
 fal_client='<Primary_Uniq_Name>'
 fal_server='<Stby_Uniq_Name>'

3.4. Copy password file from Primary to All the Standby nodes. 
 At Standby Node1, as oracle user
 scp <Your UserID>@<Primary_Node1>:<Oracle_Home>/dbs/orapw<SID>  <Oracle_Home>/dbs/orapw<SID>
 
 At standby Node2, as oracle user
 scp <Your UserID>@<Primary_Node1>:<Oracle_Home>/dbs/orapw<SID>  <Oracle_Home>/dbs/orapw<SID>

NOTE: Make sure you use correct <SID> value for each standby node. It will have 1,2,.. numbers attached to it. 

3.5. At standby, on all the nodes, Create oratab entry 
 vi /etc/oratab
 <ORACLE_SID>:<ORACLE_HOME>:N

3.6a. At primary, On the Node 1 (and node2 also), Make sure that you make a static entry in the listener.ora. 

 SID_LIST_LISTENER =
   (SID_LIST =
       (SID_DESC =
       (GLOBAL_DBNAME=<Primary_Unique_name>)
       (SID_NAME =<Node1_SID>)
       (ORACLE_HOME =<Oracle Home Location>)
     )
   )

Then reload the Listener: 
 lsnrctl reload listener

3.6b. At standby, On the Node 1 (and Node2), Make sure that you make a static entry in the listener.ora. 

 SID_LIST_LISTENER =
   (SID_LIST =
       (SID_DESC =
       (GLOBAL_DBNAME=<Standby_Unique_name>)
       (SID_NAME =<Node1_SID>)
       (ORACLE_HOME =<Oracle Home Location>)
     )
   )

Then reload the Listener: 
 lsnrctl reload listener

NOTE: This static entry (with name as STBY_DB_UNIQUE_NAME) is needed for auxiliary channel connection during RMAN standby creation. 

3.7. At standby, on node1, Create a simple PFILE with just DB_NAME in it. 
 cd $ORACLE_HOME/dbs
 vi init<SID>.ora
   DB_NAME='<dbname>'

3.8. At standby, on all the nodes, Create File directory structure for AUDIT_FILE_DEST parameter use. 
 AUDIT_FILE_DEST='/opt/oracle/admin/<standby_uniq_name>/adump'
 
3.9. At standby, on node1, Start the instance to NOMOUNT with the PFILE created above. 
 .oraenv
 ORACLE_SID = [XYZ] ? <type the SID here>
 sqlplus / as sysdba
 SQL> startup pfile='<absolute path of the pfile>' nomount;
 
NOTE: Review the primary parameter files for any other directory related parameters and make sure to create them. And include it the below DUPLICATE command. 

3.10. At standby, on Node1, Create a file with the below DUPLICATE command in it 
 cat duplicate.rman
 
 (stby-rman-dup.cmd)
 DUPLICATE TARGET DATABASE
   FOR STANDBY
   FROM ACTIVE DATABASE
   DORECOVER
   SPFILE
     SET DB_UNIQUE_NAME='<Stby_uniqu_name>'
     SET LOG_ARCHIVE_DEST_1='LOCATION=USE_DB_RECOVERY_FILE_DEST  valid_for=(all_logfiles,all_roles)db_unique_name=<Stby_uniq_name>'
     SET LOG_ARCHIVE_DEST_2='SERVICE=<Primary_uniq_name> lgwr async valid_for=(online_logfiles,primary_role)db_unique_name=<Primary_uniq_name>'
     SET FAL_CLIENT='<Stby_uniq_name>'
     SET FAL_SERVER='<Primary_uniq_name>'
     SET REMOTE_LISTENER='<stby_scan_name>:<port>'
     SET AUDIT_FILE_DEST='/opt/oracle/admin/<standby_uniq_name>/adump'
   NOFILENAMECHECK;

3.11. At standby, from Node1, Run RMAN in the background. 

 (stby-rman-dup.sh)
 nohup rman target sys/****@<PrimaryNode_vip1>/<Primary_uniq_name>  auxiliary sys/****@<standbynode_vip1>/<stby_uniq_name>  @duplicate.rman &

3.12. Monitor nohup.out, check for any errors. 

3.13. Verify the Log shipping & Apply 

 At primary,
 (prim-switch-logfile.sql)
 SQL> alter system archive log current;
 
 (check-log.sql)
 SQL> select thread#, group#, sequence#, ARCHIVED, STATUS
       from v$log
       order by 1,2;

 At standby,
 (check-db-role.sql)
 SQL> select name,db_unique_name,database_role from v$database;
 
 (check-arch-log.sql)
 SQL> select THREAD#,SEQUENCE#,ARCHIVED,APPLIED,STATUS
      from v$archived_log
      order by 1,2
 
NOTE: Make sure all the logs from all the threads are archived. 
 Start MRP and verify for any gaps
 
 (stby-recover-managed-stby.sql)
 SQL> alter database recover managed standby database using current logfile disconnect from session;
 
 (stby-arch-gap-check.sql)
 SQL> select PROCESS,STATUS,THREAD#,SEQUENCE# from v$managed_standby;
 SQL> select * from v$archive_gap;

3.14. Re-create SPFILE on standby Only 

The DUPLICATE command will create the SPFILE under ORACLE_HOME. So, we need to re-created it inside ASM. 

From One of the Standby Node, 

 (stby-create-spfile.sql)
 SQL> create pfile='/tmp/pfile' from spfile;
 SQL> create spfile='+<Data_DG_Name>/<Standby_Uniq_Name>/spfile<DB_NAME>.ora' from pfile='/tmp/pfile';

 *** IMPORTANT:
   Create init<SID>.ora file on All node on standby, and have a single parameter to point to SPFILE in ASM. 
   Eg:-
      cat initMYDB11.ora
      SPFILE='+DATA_DG01/MYDB1_site2/spfileMYDB1.ora'

3.15. At standby, From one of the node, Register the standby with CRS 

 Make sure you set the environment before you issue srvctl, 
 $ . oraenv
 ORACLE_SID = [MYDB11] ?  <Type the respective SID here>

Register the standby information, 

(stby-register-in-crs.sh)
 srvctl add database -d <Standby_Db_Unique_name>  -o <Oracle Home Path>  -p <SPFILE_Location_in_ASM> -n <DB_Name>  -r PHYSICAL_STANDBY  -s mount 
 srvctl add instance -d <Standby_DB_Unique_name>  -i <Node1_SID> -n <Node1_Physical_Hostname>
 srvctl add instance -d <Standby_DB_Unique_name>  -i <Node2_SID> -n <Node2_Physical_Hostname>

Verify the Configuration, 
 srvctl config database -d  <Standby_DB_Unique_name>  
 srvctl config database -d  <Standby_DB_Unique_name>  â€“a

Verify start/stop of the database. And check it works successfully, 
 srvctl stop database â€“d  <Standby_DB_Unique_name>  
 srvctl start database â€“d  <Standby_DB_Unique_name>

4. Broker Configuration

4.1. Add static entry in the listener.ora and reload the listener. (/usr/local/tns/listener.ora ) 

 On Primary, ( Perform this on all the nodes in the Primary ) 
 SID_LIST_LISTENER =
   (SID_LIST =
 . . .
 . . .
   (SID_DESC =
     (GLOBAL_DBNAME = <Primary_db_unique_name>_DGMGRL)
     (ORACLE_HOME = <Oracle Home Path> )
     (SID_NAME = <Nodeâ€™s_SID> )    <<<<<<<<<<<<<<< Use nodeâ€™s respective SID
   )
 . . .
 . . .
 )

And then reload the listener, 
 $ lsnrctl reload listener

NOTE: Wait for few seconds to 1 minute and check the â€˜lsnrctl status listenerâ€™ and verify if the service name is reflecting. 

 On standby, ( Perform this on all the nodes in the Standby) 
   (SID_DESC =
     (GLOBAL_DBNAME = <Standby_DB_Unique_Name>_DGMGRL)
     (ORACLE_HOME = <Oracle Home Path> )
     (SID_NAME = <Nodeâ€™s_SID>)    <<<<<<<<<<<<<<< Use nodeâ€™s respective SID
   )

And then, reload the listener, 
 $ lsnrctl reload listener

NOTE: Wait for few seconds to 1 minute and check the â€˜lsnrctl status listenerâ€™ and verify if the service name is reflecting. 

4.2. Add broker related parameters: 

 At primary, 
 (prim-broker-init-ora.sql)
 alter system set dg_broker_config_file1='+<Data_DG_Name>/<Primary_DB_Unique_Name>/DATAGUARDCONFIG/dg_config_file1.dat' scope=both;
 alter system set dg_broker_config_file2='+<FRA_DG_Name>/<Primary_DB_Unique_Name>/DATAGUARDCONFIG /dg_config_file2.dat' scope=both;
 alter system set dg_broker_start=TRUE scope=both;

 At Standby, 
 (stby-broker-init-ora.sql)
 alter system setdg_broker_config_file1='+<Data_DG_Name>/<Standby_DB_Unique_Name>/DATAGUARDCONFIG /dg_config_file1.dat' scope=both;
 alter system set dg_broker_config_file2='+<FRA_DG_Name>/<Standby_DB_Unique_Name>/DATAGUARDCONFIG /dg_config_file2.dat' scope=both;
 alter system set dg_broker_start=TRUE scope=both;

4.3. At primary, Create the Broker configuration 
NOTE: See troubleshooting after the steps

Set the environment variables to the Primary DB and then login to dgmgrl. 
 $ . oraenv
 ORACLE_SID = [MYDB11] ?  <Type the respective SID here>
 $ dgmgrl /
 DGMGRL> create configuration 'DG_<DB_Name>' as primary database is â€˜<Primary_DB_Unique_Name>' connect identifier is â€˜<Primary_DB_Unique_Name>â€™;
 DGMGRL> add database â€˜<Standby_DB_Unique_Name>â€™ as connect identifier is â€˜<Standby_DB_Unique_Name>â€™ maintained as physical;
 DGMGRL> enable configuration;
 DGMGRL> show configuration;
 DGMGRL> show database 'primary_db_unique_name'
 DGMGRL> show database 'standby_db_unique_name'
 
 TROUBLESHOOTING:
 This may end up with some 'inconsistent configuration' 
 --> with 'show configuration' saying something like the following:
   Databases:
    PRIM_DB_UNIQUE_NAME - Primary database
    STANDBY_DB_UNIQUE_NAME  - Physical standby database
      Warning: ORA-16792: configurable property value is inconsistent with database setting

 To fix:
 https://easyoradba.com/2012/12/05/warning-ora-16714-the-value-of-property-is-inconsistent-with-the-database-setting/
 
 DGMGRL> show database 'STBY_DB_UNIQUE_NAME'

  Database - STBY_DB_UNIQUE_NAME

  Role:            PHYSICAL STANDBY
  Intended State:  APPLY-ON
  Transport Lag:   0 seconds (computed 0 seconds ago)
  Apply Lag:       0 seconds (computed 0 seconds ago)
  Apply Rate:      253.00 KByte/s
  Real Time Query: OFF
  Instance(s):
    RL4DB31 (apply instance)
      Warning: ORA-16714: the value of property ArchiveLagTarget is inconsistent with the database setting
      Warning: ORA-16714: the value of property LogArchiveMaxProcesses is inconsistent with the database setting
      Warning: ORA-16714: the value of property LogArchiveMinSucceedDest is inconsistent with the database setting

 DGMGRL> show database 'STBY_DB_UNIQUE_NAME' InconsistentProperties
 INCONSISTENT PROPERTIES
   INSTANCE_NAME        PROPERTY_NAME         MEMORY_VALUE         SPFILE_VALUE         BROKER_VALUE
         RL4DB31     ArchiveLagTarget                    0                                         0
         RL4DB31 LogArchiveMaxProcesses                    4                                         4
         RL4DB31 LogArchiveMinSucceedDest                    1                                         1

 Now, go to standy db and set the following: 
 (note-querying these from gv$parameter show right values, but probably they are not in spfile)
 alter system set log_archive_max_processes=4 scope=both sid='*';
 alter system set archive_lag_target=0 scope=both sid='*';
 alter system set log_archive_min_succeed_dest=1 scope=both sid='*';

 DGMGRL> show configuration 
 Configuration - DG_DBNAME

  Protection Mode: MaxPerformance
  Databases:
    PRIM_DB_UNIQUE_NAME - Primary database
    STBY_DB_UNIQUE_NAME  - Physical standby database

 Fast-Start Failover: DISABLED

 Configuration Status:
 SUCCESS

 
4.4. Switchover Test 

 NOTE: Make sure that you login with the sys/password and not with OS authentication â€˜/â€™. Otherwise the switchover will not work correctly. 
 $ dgmgrl sys/*********
 
 DGMGRL> show configuration
 
 Configuration - DG_MYDB1
   Protection Mode: MaxPerformance
   Databases:
     MYDB1_site1  - Primary database
     MYDB1_site2 - Physical standby database
   
 Fast-Start Failover: DISABLED
   
 Configuration Status:
 SUCCESS
 
 DGMGRL> switchover to 'MYDB1_site2';
 
 Performing switchover NOW, please wait...
 New primary database "MYDB1_site2" is opening...
 Operation requires shutdown of instance "MYDB1" on database "MYDB1_site1"
 Shutting down instance "MYDB1"...
 ORACLE instance shut down.
 Operation requires startup of instance "MYDB1" on database "MYDB1_site1"
 Starting instance "MYDB1"...
 ORACLE instance started.
 Database mounted.
 Switchover succeeded, new primary is "MYDB1_site2"
 
 DGMGRL> show configuration;
 
 Configuration - DG_MYDB1
 
   Protection Mode: MaxPerformance
   Databases:
     MYDB1_site2 - Primary database
     MYDB1_site1  - Physical standby database
 
 Fast-Start Failover: DISABLED
 
 Configuration Status:
 SUCCESS
 
 DGMGRL> switchover to 'MYDB1_site1';
 
 Performing switchover NOW, please wait...
 New primary database "MYDB1_site1" is opening...
 Operation requires shutdown of instance "MYDB1" on database "MYDB1_site2"
 Shutting down instance "MYDB1"...
 ORACLE instance shut down.
 Operation requires startup of instance "MYDB1" on database "MYDB1_site2"
 Starting instance "MYDB1"...
 ORACLE instance started.
 Database mounted.
 Switchover succeeded, new primary is "MYDB1_site1"
 
 DGMGRL> show configuration
 
 Configuration - DG_MYDB1
 
   Protection Mode: MaxPerformance
   Databases:
     MYDB1_site1  - Primary database
     MYDB1_site2 - Physical standby database
 
 Fast-Start Failover: DISABLED
 
 Configuration Status:
 SUCCESS

