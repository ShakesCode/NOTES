
==============================================
JDBC PROGRAMMING WITH ORACLE
==============================================
Compile:
javac -classpath "/home/oracle/jars/ojdbc6.jar"  ProgramName.java

Run:
java -cp .:/home/oracle/jars/ojdbc6.jar LdapOra1

Run with some other directives to avoid certain LDAP errors:
java -cp .:/home/oracle/jars/ojdbc6.jar -Doracle.jdbc.thinLogonCapability=o3 LdapOra1

======================================
EXAMPLES and CONNECT STRINGS
======================================
-----------------------------------
Thin + Service Name instead of SID
-----------------------------------
http://stackoverflow.com/questions/4832056/java-jdbc-how-to-connect-to-oracle-using-service-name-instead-of-sid

- Connect string options
jdbc:oracle:thin:@//HOSTNAME:PORT/SERVICENAME
jdbc:oracle:thin:@//oracle.hostserver2.mydomain.ca:1522/ABCD
jdbc:oracle:thin:@(description=(address=(host=HOSTNAME)(protocol=tcp)(port=PORT))(connect_data=(service_name=SERVICENAME)(server=SHARED)))
jdbc:oracle:thin:@(DESCRIPTION =(ADDRESS_LIST =(ADDRESS =(PROTOCOL=TCP)(HOST=blah.example.com)(PORT=1521)))(CONNECT_DATA=(SID=BLAHSID)(GLOBAL_NAME=BLAHSID.WORLD)(SERVER=DEDICATED)))

- Sample code
import java.sql.*; 

public class MyDBConnect {

    public static void main(String[] args) throws SQLException {

        try { 
            String dbURL = "jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=whatEverYourHostNameIs)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=yourServiceName)))";
            String strUserID = "yourUserId";
            String strPassword = "yourPassword";
            Connection myConnection=DriverManager.getConnection(dbURL,strUserID,strPassword);

            Statement sqlStatement = myConnection.createStatement();
            String readRecordSQL = "select * from sa_work_order where WORK_ORDER_NO = '1503090' ";  
            ResultSet myResultSet = sqlStatement.executeQuery(readRecordSQL);
            while (myResultSet.next()) {
                System.out.println("Record values: " + myResultSet.getString("WORK_ORDER_NO"));
            }
            myResultSet.close();
            myConnection.close();

        } catch (Exception e) {
            System.out.println(e);
        }       
    }
}


-----------------------------------
OCI
-----------------------------------
https://docs.oracle.com/cd/B28359_01/java.111/b31224/instclnt.htm

-----------------------------------
JDBC BASIC EXAMPLE 
-----------------------------------
https://docs.oracle.com/database/121/JJDBC/getsta.htm#JJDBC28058

-----------------------------------
Thin with SID - Nice-compact-code 
-----------------------------------
http://www.javatpoint.com/example-to-connect-to-the-oracle-database

import java.sql.*;  
class OracleCon{  
public static void main(String args[]){  
try{  
//step1 load the driver class  
Class.forName("oracle.jdbc.driver.OracleDriver");  
  
//step2 create  the connection object  
Connection con=DriverManager.getConnection(  
"jdbc:oracle:thin:@localhost:1521:xe","system","oracle");  
  
//step3 create the statement object  
Statement stmt=con.createStatement();  
  
//step4 execute query  
ResultSet rs=stmt.executeQuery("select * from emp");  
while(rs.next())  
System.out.println(rs.getInt(1)+"  "+rs.getString(2)+"  "+rs.getString(3));  
  
//step5 close the connection object  
con.close();  
  
}catch(Exception e){ System.out.println(e);}  
  
}  
}  

-----------------------------------
LDAP URL WITH ENTERPRISE USERS
-----------------------------------
TBD - Thin
TBD - OCI


------------------------------------------------------
EXAMPLE - VARIOUS STRINGS, THIN/OCI, PROPERTIES OBJECT
------------------------------------------------------
http://www.codejava.net/java-se/jdbc/connect-to-oracle-database-via-jdbc

- Using database URL and Properties object

In this method, we use a java.util.Properties object to hold username, password and other additional properties. For example:

String dbURL = "jdbc:oracle:oci:@ProductDB";
Properties properties = new Properties();
properties.put("user", "scott");
properties.put("password", "tiger");
properties.put("defaultRowPrefetch", "20");
 
Connection conn = DriverManager.getConnection(dbURL, properties);
 
In this example, we are using the OCI Driver with a TNSNAMES entry ProductDB, and specifying an additional property defaultRowPrefetch which is the number of rows to prefetch from the server.


- Example program
To demonstrate, we create a small example program below that establishes three different connections in 3 ways mentioned above, and finally close all the connections:

package net.codejava.jdbc;
 
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;
 
/**
 * This program demonstrates how to make database connection with Oracle
 * database server.
 * @author www.codejava.net
 *
 */
public class JdbcOracleConnection {
 
    public static void main(String[] args) {
 
        Connection conn1 = null;
        Connection conn2 = null;
        Connection conn3 = null;
 
        try {
            // registers Oracle JDBC driver - though this is no longer required
            // since JDBC 4.0, but added here for backward compatibility
            Class.forName("oracle.jdbc.OracleDriver");
 
            // METHOD #1
            String dbURL1 = "jdbc:oracle:thin:tiger/scott@localhost:1521:productDB";
            conn1 = DriverManager.getConnection(dbURL1);
            if (conn1 != null) {
                System.out.println("Connected with connection #1");
            }
 
            // METHOD #2
            String dbURL2 = "jdbc:oracle:thin:@localhost:1521:productDB";
            String username = "tiger";
            String password = "scott";
            conn2 = DriverManager.getConnection(dbURL2, username, password);
            if (conn2 != null) {
                System.out.println("Connected with connection #2");
            }
 
            // METHOD #3
            String dbURL3 = "jdbc:oracle:oci:@ProductDB";
            Properties properties = new Properties();
            properties.put("user", "tiger");
            properties.put("password", "scott");
            properties.put("defaultRowPrefetch", "20");
            conn3 = DriverManager.getConnection(dbURL3, properties);
 
            if (conn3 != null) {
                System.out.println("Connected with connection #3");
            }
        } catch (ClassNotFoundException ex) {
            ex.printStackTrace();
        } catch (SQLException ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (conn1 != null && !conn1.isClosed()) {
                    conn1.close();
                }
                if (conn2 != null && !conn2.isClosed()) {
                    conn2.close();
                }
                if (conn3 != null && !conn3.isClosed()) {
                    conn3.close();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }
}

