===============================================
    SUPERSET DOCKER IMAGE (PREBUILT ALREADY)
===============================================

IMAGE1

https://hub.docker.com/r/amancevice/superset/
https://github.com/ApacheInfra/superset

PUBLIC | AUTOMATED BUILD
amancevice/superset
Last pushed: 7 days ago
Repo Info
Tags
Dockerfile
Build Details
Short Description
[0.23.3] Superset on Debian+Python3
Full Description
Superset
Docker image for Superset.

Examples
Navigate to the examples directory to view examples of how to configure Superset with MySQL, PostgreSQL, or SQLite.

Versions
This repo is tagged in parallel with superset. Pulling amancevice/superset:0.18.5 will fetch the image of this repository running superset version 0.18.5. It is possible that the latest tag includes new features/support libraries but will usually be in sync with the latest semantic version.

Configuration
Follow the instructions provided by Apache Superset for writing your own superset_config.py. Place this file in a local directory and mount this directory to /etc/superset inside the container. This location is included in the image's PYTHONPATH. Mounting this file to a different location is possible, but it will need to be in the PYTHONPATH.

View the contents of the examples directory to see some simple superset_config.py samples.

Volumes
The image defines two data volumes: one for mounting configuration into the container, and one for data (logs, SQLite DBs, &c).

The configuration volume is located alternatively at /etc/superset or /home/superset; either is acceptable. Both of these directories are included in the PYTHONPATH of the image. Mount any configuration (specifically the superset_config.py file) here to have it read by the app on startup.

The data volume is located at /var/lib/superset and it is where you would mount your SQLite file (if you are using that as your backend), or a volume to collect any logs that are routed there. This location is used as the value of the SUPERSET_HOME environmental variable.

Database Initialization
After starting the Superset server, initialize the database with an admin user and Superset tables using the superset-init helper script:

docker run --detach --name superset [options] amancevice/superset
docker exec -it superset superset-init
Upgrading
Upgrading to a newer version of superset can be accomplished by re-pulling amancevice/supersetat a specified superset version or latest (see above for more on this). Remove the old container and re-deploy, making sure to use the correct environmental configuration. Finally, ensure the superset database is migrated up to the head:

# Pull desired version
docker pull amancevice/superset

# Remove the current container
docker rm -f superset-old

# Deploy a new container ...
docker run --detach --name superset-new [options] amancevice/superset

# Upgrade the DB
docker exec superset-new superset db upgrade

IMAGE 2

https://hub.docker.com/r/tylerfowler/superset/
https://hub.docker.com/r/tylerfowler/superset/airbnb.io/superset

PUBLIC REPOSITORY
tylerfowler/superset
Last pushed: 3 months ago
Repo Info
Tags
Short Description
An extendable Docker image for Airbnb's Superset platform, previously known as Caravel.
Full Description
Superset


An extendable Docker image for Airbnb's Superset platform.

Basic Setup
By default the Superset meta database will be stored in a local sqlite database, in the most basic case getting a working Caravel instance up and running is as simple as:

docker run -d --name superset -p 8088:8088 tylerfowler/superset
The entrypoint script will set up an admin user for you using the ADMIN_* environment variables, with a default username and password of:

username: admin
password: superset
Modifying Admin Credentials
The admin user is created in the entrypoint script using the ADMIN_* environment variables in the Dockerfile, which should be overriden.

docker run -d --name superset \
  -e ADMIN_USERNAME=myadminuser \
  -e ADMIN_FIRST_NAME=Some \
  -e ADMIN_LAST_NAME=Name \
  -e ADMIN_EMAIL=nobody@nowhere.com \
  -e ADMIN_PWD=mypassword \
  -p 8088:8088 \
tylerfowler/superset
Modifying Database Backends
In order to keep the base image as lean as possible only the Postgres driver is included and any other database drivers or libraries that are needed should be installed in a downstream image. To use a different backend you just need to install the appropriate drivers and modify the $SUP_META_DB_URI to be the database connection string for the backend, which is only used in the entrypoint script at runtime.

Modifying the Caravel Configuration
The Caravel config file is generated dynamically in the entrypoint script using the SUP_* environment variables, for example to increase the row limit to 10000 and the number of webserver threads to 16:

docker run -d --name superset \
  -e SUP_ROW_LIMIT=10000 \
  -e SUP_WEBSERVER_THREADS=16 \
  -p 8088:8088 \
tylerfowler/superset
Advanced Configuration via Custom Entrypoint
In order to correctly set up Caravel the entrypoint needs to be set the superset-init.sh script, though if a more advanced configuration is required you can also supply your own entrypoint script.

In your Dockerfile add any script as long as it ends up at /docker-entrypoint.sh. This script will be run after the initial superset_config.py is generated but before any of the Superset setup commands are ran. Note that the environment variables will still be used to bootstrap the Caravel configuration file.

For example to add a Redis cache to your configuration:

#!/bin/bash

cat <<EOF >> $SUPERSET_HOME/superset_config.py
CACHE_CONFIG = {
  'CACHE_TYPE': 'RedisCache',
  'CACHE_REDIS_URL': 'localhost:6379'
}
EOF
After this is finished running Caravel will continue to configure itself as normal. Alternately, if the init script detects that a superset-config.py file already exists under $SUPERSET_HOME then it will skip bootstrapping the file altogether and will use the user supplied config instead. Similarly after Caravel is finished setting itself up (migrating the DB, initializing, creating admin user, etc...) it will write an empty file at $SUPERSET_HOME/.setup-complete so that subsequent runs on a mounted volume will not set up Caravel from scratch. To take advantage of this fact simply mount the $SUPERSET_HOME directory (which is /superset by default).

docker run -d --name superset \
  -v /mysuperset:/superset \
  -p 8088:8088 \
tylerfowler/superset
Note, however, that even if an existing Caravel configuration is detected, any user supplied docker-entrypoint.sh file will still be run. So if need be write a file that can be checked for to ensure your script only runs once in the same fashion that the superset-init.sh script does.

Enjoy!
