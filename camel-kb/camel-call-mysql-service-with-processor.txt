===========================================================
CAMEL PROGRAM TO CALL MYSQL SERVICE REST-API TO CREATE A DB
===========================================================

NOTE: The MySQL Rest API is 'NOT' a Camel-Rest API.  It is a jaxrs, jersey, jackson API without Camel CXFRS or rest-dsl.

This project uses Maven, Eclipse, Camel

--------------------------
About the MySqlService API
--------------------------
See kb mysql-java-project.txt

-----------------------------
Original Postman URL and Json
-----------------------------
localhost:8080/gm-mysql-services/MySqlService/json/createdb

{
   "hostname":"localhost",
   "port":"13306",
   "dbname":"mkt",
   "username":"mktuser",
   "password":"mkt123_MKT123"
}

--------------------------------
MAVEN CONFIGURATION AND PROGRAMS
--------------------------------

ARCHETYPE
camel-archetype-java

GROUP ID
gm.camel

ARTIFACT ID
gm-camel-two

PACKAGE
gm.camel.two

POM.XML
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <groupId>gm.camel</groupId>
  <artifactId>gm-camel-two</artifactId>
  <packaging>jar</packaging>
  <version>0.0.1-SNAPSHOT</version>

  <name>A Camel Route</name>
  <url>http://www.myorganization.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-core</artifactId>
      <version>2.17.1</version>
    </dependency>
    <!-- logging -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>1.7.13</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <version>1.7.13</version>
    </dependency>
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <version>1.2.17</version>
    </dependency>

    <!-- testing -->
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-test</artifactId>
      <version>2.17.1</version>
      <scope>test</scope>
    </dependency>
    
    <!-- camel-stream for screen output and other stream handling -->
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-stream</artifactId>
      <version>2.17.1</version>
    </dependency>
    
    <!-- camel-xtream for marshal().json() -->
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-xstream</artifactId>
      <version>2.17.1</version>
    </dependency>

    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-http</artifactId>
      <version>2.17.1</version>
    </dependency>

    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-http4</artifactId>
      <version>2.17.1</version>
    </dependency>

    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-ahc</artifactId>
      <version>2.17.1</version>
    </dependency>
  
    <dependency>
    <groupId>org.apache.camel</groupId>
    <artifactId>camel-cxf</artifactId>
    <version>2.17.1</version>
    </dependency>

    <dependency>
    <groupId>org.apache.camel</groupId>
    <artifactId>camel-restlet</artifactId>
    <version>2.17.1</version>
    </dependency>

  </dependencies>

  <build>
    <defaultGoal>install</defaultGoal>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.5.1</version>
        <configuration>
          <source>1.7</source>
          <target>1.7</target>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>2.6</version>
        <configuration>
          <encoding>UTF-8</encoding>
        </configuration>
      </plugin>

      <!-- Allows the example to be run via 'mvn compile exec:java' -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.4.0</version>
        <configuration>
          <mainClass>gm.camel.two.MainApp</mainClass>
          <includePluginDependencies>false</includePluginDependencies>
        </configuration>
      </plugin>

    </plugins>
  </build>

</project>

CODE
package gm.camel.two;

import org.apache.camel.CamelContext;
import org.apache.camel.Message;
import org.apache.camel.Processor;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.Exchange;
import org.apache.camel.builder.*;
import org.apache.camel.impl.DefaultCamelContext;
import org.apache.camel.http.common.HttpMethods;
import com.ning.http.client.AsyncHttpClientConfig;
import com.ning.http.client.AsyncHttpClientConfig.Builder;

public class MySqlServiceCallExchangeProcessor {

	public static void main(String args[]) throws Exception {

		CamelContext context = new DefaultCamelContext();
		ProducerTemplate producerTemplate = context.createProducerTemplate();
		
		Processor processor = new Processor() {
			public void process(Exchange exchange) throws Exception {
				
				Message message=exchange.getIn();
				
				//OK
				message.setHeader(Exchange.HTTP_METHOD, "POST");
				//OK
				//message.setHeader(Exchange.HTTP_METHOD, org.apache.camel.component.http.HttpMethods.POST.name());
				
				//NOT OK
     			//message.setHeader(Exchange.ACCEPT_CONTENT_TYPE, "application/json");
				
				//OK
				message.setHeader("Content-Type", "application/json");
				
				//NOT REQUIRED
     			//message.setHeader(Exchange.CHARSET_NAME, "utf8");
				
				//OK
				message.setBody("{\"hostname\":\"localhost\", \"port\":\"13306\", \"dbname\":\"mkt\", \"username\":\"mktuser\",\"password\":\"mkt123_MKT123\"}");
				
				System.out.println ("Message body   = " + message.getBody(String.class));
				System.out.println ("Message header = " + message.getHeader(Exchange.HTTP_METHOD, String.class));
				System.out.println ("message header Exchange.ACCEPT_CONTENT_TYPE means " + Exchange.ACCEPT_CONTENT_TYPE);
				System.out.println ("Message header = " + message.getHeader(Exchange.ACCEPT_CONTENT_TYPE, String.class));
				System.out.println ("Message header = " + message.getHeader("Content-Type", String.class));
				System.out.println ("Message header = " + message.getHeader(Exchange.CHARSET_NAME, String.class));
			}
		};

		// Dummy processor if necessary for testing
		Processor processor1 = new Processor() {
			public void process(Exchange exchange) throws Exception {		
				//
			}
		};
		
		System.out.println("\nCalling MySqlService");
		
	    context.setTracing(true);
	    
		// Start the Camel route - no need if using template and exchange
	    //System.out.println ("Starting context");
	    //context.start();

		Exchange exchange = producerTemplate.send("http://localhost:8080/gm-mysql-services/MySqlService/json/createdb", processor);
		//Exchange exchange = producerTemplate.send("http://localhost:8080", processor1);

		Message out = exchange.getOut();
		int responseCode = out.getHeader(Exchange.HTTP_RESPONSE_CODE, Integer.class);
		
		System.out.println("Response code = " + responseCode);
		System.out.println("Response body = " + out.getBody(String.class));
		System.out.println("Response header = " + out.getHeaders());
		
		context.stop();
		System.out.println ("\nContext stopped... coming out");		
	}
}

RUN OUTPUT ON SCREEN

Calling MySqlService
Starting context
[                          main] DefaultCamelContext            INFO  Apache Camel 2.17.1 (CamelContext: camel-1) is starting
[                          main] DefaultCamelContext            INFO  Tracing is enabled on CamelContext: camel-1
[                          main] ManagedManagementStrategy      INFO  JMX is enabled
[                          main] DefaultTypeConverter           INFO  Loaded 214 type converters
[                          main] DefaultRuntimeEndpointRegistry INFO  Runtime endpoint registry is in extended mode gathering usage statistics of all incoming and outgoing endpoints (cache limit: 1000)
[                          main] DefaultCamelContext            INFO  AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance.
[                          main] DefaultCamelContext            INFO  StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
[                          main] DefaultCamelContext            INFO  Total 0 routes, of which 0 are started.
[                          main] DefaultCamelContext            INFO  Apache Camel 2.17.1 (CamelContext: camel-1) started in 0.391 seconds
Message body   = {"hostname":"localhost", "port":"13306", "dbname":"mkt", "username":"mktuser","password":"mkt123_MKT123"}
Message header = null
message header Exchange.ACCEPT_CONTENT_TYPE means CamelAcceptContentType
Message header = null
Message header = application/json
Message header = null
Response code = 200
Response body = createDb - created the db
Response header = {breadcrumbId=ID-LAPTOPNAME-50736-1465205882740-0-1, CamelHttpResponseCode=200, CamelHttpResponseText=OK, Content-Length=25, Content-Type=text/plain, Date=Mon, 06 Jun 2016 09:38:03 GMT, Server=Apache-Coyote/1.1}
[                          main] DefaultCamelContext            INFO  Apache Camel 2.17.1 (CamelContext: camel-1) is shutting down
[                          main] DefaultCamelContext            INFO  Apache Camel 2.17.1 (CamelContext: camel-1) uptime 0.681 seconds
[                          main] DefaultCamelContext            INFO  Apache Camel 2.17.1 (CamelContext: camel-1) is shutdown in 0.002 seconds

Context stopped... coming out
