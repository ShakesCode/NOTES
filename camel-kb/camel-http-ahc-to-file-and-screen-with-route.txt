===============================================================
READ A HTTP SITE AND DUMP ITS CONTENTS TO A FILE AND TO SCREEN
===============================================================

ARCHETYPE
camel-archetype-java

GROUPID
gm.camel

ARTIFACTID
gm-camel-two

PACKAGE
gm.camel.two

POM.XML
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <groupId>gm.camel</groupId>
  <artifactId>gm-camel-two</artifactId>
  <packaging>jar</packaging>
  <version>0.0.1-SNAPSHOT</version>

  <name>A Camel Route</name>
  <url>http://www.myorganization.org</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-core</artifactId>
      <version>2.17.1</version>
    </dependency>
    <!-- logging -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>1.7.13</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <version>1.7.13</version>
    </dependency>
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <version>1.2.17</version>
    </dependency>

    <!-- testing -->
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-test</artifactId>
      <version>2.17.1</version>
      <scope>test</scope>
    </dependency>
    
    <!-- camel-stream for screen output and other stream handling -->
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-stream</artifactId>
      <version>2.17.1</version>
    </dependency>
    
    <!-- camel-xtream for marshal().json() -->
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-xstream</artifactId>
      <version>2.17.1</version>
    </dependency>

    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-http</artifactId>
      <version>2.17.1</version>
    </dependency>

    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-http4</artifactId>
      <version>2.17.1</version>
    </dependency>

    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-ahc</artifactId>
      <version>2.17.1</version>
    </dependency>
  
 

  </dependencies>

  <build>
    <defaultGoal>install</defaultGoal>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.5.1</version>
        <configuration>
          <source>1.7</source>
          <target>1.7</target>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>2.6</version>
        <configuration>
          <encoding>UTF-8</encoding>
        </configuration>
      </plugin>

      <!-- Allows the example to be run via 'mvn compile exec:java' -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.4.0</version>
        <configuration>
          <mainClass>gm.camel.two.MainApp</mainClass>
          <includePluginDependencies>false</includePluginDependencies>
        </configuration>
      </plugin>

    </plugins>
  </build>

</project>

CODE
package gm.camel.two;

import org.apache.camel.CamelContext;
import org.apache.camel.Message;
import org.apache.camel.Processor;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.Exchange;
import org.apache.camel.builder.*;
import org.apache.camel.impl.DefaultCamelContext;

import com.ning.http.client.AsyncHttpClientConfig;
import com.ning.http.client.AsyncHttpClientConfig.Builder;

public class HttpAhcToFileWithRoute {

	public static void main(String args[]) throws Exception {

		   CamelContext context = new DefaultCamelContext();
		   
		    context.addRoutes(new RouteBuilder()
		      {
		      public void configure()
		        {
		    	  
		    	    //this did not work - from ("direct:start")
		    	    //--
		    	  	from("timer:foo?repeatCount=1")
		    	  	//OK
		    	    //.to("http://www.google.com/search?hl=en&q=camel&clientConfig.maxRequestRetry=3&clientConfig.followRedirects=true")
		    	  	//OK
		    	  	//.to("http4://www.google.com/search?hl=en&q=camel&clientConfig.maxRequestRetry=3&clientConfig.followRedirects=true")
		    	  	//OK
		    	    //.to("ahc:http://localhost:8080")
		    	  	//OK
		    	  	.to("http://localhost:8080")
		    	  	//Not sure what this does - .to("log:result?showAll=true")
                    .convertBodyTo(String.class)
		    	  	.to("file:C:/tmp/out1?fileName=http.txt")
		    	  	.to("stream:out")
		    	  	;
		        }
		      });
		    
		    // Start the Camel route
		    System.out.println ("Starting context");
		    context.start();

		    // Wait x minutes, then stop
		    Thread.sleep (60*1*100);
		    System.out.println ("Stopping context");

		    context.stop ();
		    }
}
