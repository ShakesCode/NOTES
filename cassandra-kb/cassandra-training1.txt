RDBMS
Strict schema
Not natively distributed - distributed is an additional feature
- so, not natively scalable
ACID

NO-SQL
Schema free - dynamic schema
Distributed natively - that is the feature
CAP instead of ACID
- Consistency, Availability, Parititioning
- Consistency is inversely proportional to partitioning
- Performance higher with more partitions

NO SQL CATEGORIES
key-value - redis
document oriented (is actually a row) - mongo, couch, dynamo…
column oriented - key-value - cassandra, hbase 
graph oriented

Mongo - heavy read ok, heavy write not ok
Cassandra - heavy write ok, heavy reads not that ok
Cassandra - does not have a single master node - so more failure tolerant

HBase is Hadoop ‘database’ - like a database designed for Hadoop workloads

CASSANDRA
Multiple machines
Write anywhere - yet user sees the whole thing as a unified one
In mysql, bigtable etc some nodes should be set up as slaves
—> but, cassandra it is decentralized - even the node/master/replication management is distributed
—> peer-to-peer ‘gossip’ protocol to keep in synch with other nodes
—> so, NO SINGLE POINT OF FAILURE - high availability ensured
Nodes can be added and removed dynamically without downtime 
- seamless scale up/down
- no downtime for the cluster overall

