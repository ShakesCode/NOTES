==========================================================
RESTFUL API CODING - SETUP REQUIRED
==========================================================

==============
CHROME POSTMAN
==============
Install Chrome plugin 'postman' to test REST calls

==============
CURL
==============
Install curl to test REST calls on command line

============
DOWNLOADS
============
Jersey
Jackson
Oracle JDBC Driver
(maybe more, listed or unlisted below)

---------------
DOWNLOAD JERSEY 
---------------
http://www.tutorialspoint.com/restful/restful_first_application.htm

* Download from https://jersey.java.net/download.html
 --> file like jaxrs-ri-2.22.2.zip 
 --> This contains multiple sub-folders with jars
* Copy all those jars to WEB-INF/lib of your project
* Add those jars (probably from WEB-INF/lib itself) into the build-path as 'external jars'

----------------------------------
DOWNLOAD JACKSON (to support json)
----------------------------------
Reason: Jax RS/Jersey does not come with Json/Pojo support out of the box.
(as mentioned in http://stackoverflow.com/questions/30423776/post-to-jersey-rest-service-getting-error-415-unsupported-media-type)

* Download (as in the list below)
* Copy all those jars to WEB-INF/lib of your project
* Add those jars (probably from WEB-INF/lib itself) into the build-path as 'external jars'

Download the following: (as per the site above)
jersey-media-json-jackson-2.17 (done 2.22.2)
- http://mvnrepository.com/artifact/org.glassfish.jersey.media/jersey-media-json-jackson

jackson-jaxrs-json-provider-2.3.2 (done 2.7.2) 
- http://mvnrepository.com/artifact/com.fasterxml.jackson.jaxrs/jackson-jaxrs-json-provider

jackson-core-2.3.2  (done 2.7.2)
- http://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core

jackson-databind-2.3.2 (done 2.7.2)
- http://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind

jackson-annotations-2.3.2 (done 2.7.2)
- http://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations/2.7.2

jackson-jaxrs-base-2.3.2 (done 2.7.2)
- http://mvnrepository.com/artifact/com.fasterxml.jackson.jaxrs/jackson-jaxrs-base

jackson-module-jaxb-annotations-2.3.2 (done 2.7.2)
- http://mvnrepository.com/artifact/com.fasterxml.jackson.module/jackson-module-jaxb-annotations

jersey-entity-filtering-2.17 (done 2.22.2)
- http://mvnrepository.com/artifact/org.glassfish.jersey.ext/jersey-entity-filtering

    --------------
    If using Maven - With Maven, below will pull all the above in
    --------------
    <dependency>
        <groupId>org.glassfish.jersey.media</groupId>
        <artifactId>jersey-media-json-jackson</artifactId>
        <version>2.17</version>
    </dependency>
    For any future readers not using Jersey 2.17 (and using jars directly instead of Maven), 
    you can go here to find the Jersey version you are using, and see what transitive dependency versions you need. 
    The current version of this Jersey dependency uses Jackson 2.3.2. That's the main thing you need to look out for.

---------------------------
DOWNLOAD ORACLE JDBC DRIVER
---------------------------
Download the JDBC driver from Oracle, like ojdbc7.jar (of 12c) or ojdbc6.jar (of 11g)

Copy the jdbc driver jar into Tomcat/lib
DO NOT copy the jar into WEB-INF/lib
Add the jar in Tomcat/lib into CLASSPATH by creating a setenv.bat file in Tomcat/bin
Restart Tomcat after the above steps

----------------------------
JARS FROM ORACLE_HOME
----------------------------
If you do not have an Oracle installation on your workstation/server then copy the JARs from $ORACLE_HOME/lib to laptop.
Add them to build path where necessary 
--> Example, for XML conversion of ResultSet objects , reference xmlparsev2.jar and xsu12.jar

TBD:
**  In the case those are needed as part of the API, probably they should be made part of CLASSPATH on the J2EE server
-->  Or, can we copy them to WEB-INF/lib?
    
================================
YOUR OWN JARS
================================
NOTE: Some compilation/run-time error may come if you compile with JRE 1.8. 
      If so, change build settings to compile using 1.7 (compiler compliance level) - AND THEN JAR THEM.
      
Copy them to WEB-INF/lib
* Copy all those jars to WEB-INF/lib of your project
* Add those jars (probably from WEB-INF/lib itself) into the build-path as 'external jars'

=======================
COMPILER VERSION for THE SERVLET/API and YOUR OWN JARS
=======================
Some compilation/run-time error may come if you compile with JRE 1.8. 
If so, change build settings to compile using 1.7 (compiler compliance level) - AND THEN JAR THEM.

===============================================================================
PACKAGING THE API which uses JDBC DRIVER, YOUR OWN UTILITIES, DATA-HANDLERS ETC
===============================================================================

---------------------
DO/CHECK THESE
---------------------
Ensure that Jar's of all utilities, data-handlers etc. are compiled with compatible Java version (see compiler version section)
Copy those Jars to WEB-INF/lib of your project
Copy Jersey, Jackson jars to WEB-INF/lib of your project
Add all those jars to the build-path of your project (using the files in WEB-INF/lib itself for safety)
Ensure Oracle jdbc driver jar is NOT in WEB-INF/lib (see other section in this document)
Add the jdbc driver file into Tomcat/lib (see other section in this document)
Add the Tomcat/lib/<jdbc jar> to CLASSPATH (see other section in this document)

----------------------
PACKAGE & DEPLOY
----------------------
Package the project as a WAR file in some place
Copy it to Tomcat/webapps folder
Reload the specific service in Tomcat (using Tomcat console, logging in as admin)
Or, let Tomcat detect and load it

Altrenatively:
Package it directly to Tomcat/webapps
Reload the specific service in Tomcat (using Tomcat console, logging in as admin)
Or, let Tomcat detect and load it








