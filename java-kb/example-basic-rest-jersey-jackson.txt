=======================================
BASIC REST 

ECLIPSE-MAVEN, TOMCAT, JERSEY, JACKSON
=======================================

JERSEY USER GUIDE:  https://jersey.java.net/documentation/latest/user-guide.html#d0e3572
Servle 3 web.xml :  http://memorynotfound.com/servlet-3-web-xml-example-configuration/
Null pointer exception and org.apache.catalina.loader.WebappClassLoaderBase.binaryNameToPath(WebappClassLoaderBase.java:2495)
--> http://stackoverflow.com/questions/39401756/jersey-2-x-and-tomcat8-returning-nullpointerexception-http-status-500


NOTE:  SEE DOC restful-api-coding-setup.txt -- contains setup needs

Initial tutorial - only Jersey - https://www.tutorialspoint.com/restful/

http://stackoverflow.com/questions/30423776/post-to-jersey-rest-service-getting-error-415-unsupported-media-type
--> states need for Jackson in addition to Jersey for POJO

https://www.nabisoft.com/tutorials/java-ee/producing-and-consuming-json-or-xml-in-java-rest-services-with-jersey-and-jackson
--> has pom.xml entries for both Jersey and Jackson

BASED ON - https://www.javainterviewpoint.com/json-example-jersey-jackson/ --> Later 2016 example 
GOOD but NO POJO - http://www.vogella.com/tutorials/REST/article.html
GOOD but NO POJO - http://howtodoinjava.com/jersey/jersey-restful-client-examples/

Looks oldish, 2013 - https://examples.javacodegeeks.com/enterprise-java/rest/jersey/json-example-with-jersey-jackson/

http://www.9threes.com/2015/01/restful-java-client-with-jersey-client.html
https://www.mkyong.com/webservices/jax-rs/json-example-with-jersey-jackson/

Error 404 - http://stackoverflow.com/questions/10501665/rest-web-services-returning-a-404  (did not solve)

Jersey 2.0+ stuff - http://stackoverflow.com/questions/17568469/jersey-2-0-equivalent-to-pojomappingfeature

=================================
CREATE MAVEN PROJECT IN ECLIPSE
=================================
Similar to dynamic web project in non-maven Eclipse)
Good one (very basic) - http://crunchify.com/how-to-create-dynamic-web-project-using-maven-in-eclipse/

Workspace: workspace-scratch1
Workspace Folder: C:\Data\PROGRAMMING\JAVA\Maven\workspace-scratch1

Eclipse --> new --> maven project 
Choose archetype 'org.apache.maven.archetypes' --> 'maven-archetype-webapp'

Group ID: com.gm.scratch1.rest
Artifact ID: BasicRestJJ
Package: com.gm.scratch1.rest(webapp??).BasicRestJJ (retained default auto-filled)
Button 'Finish'

This will create the WEB-INF and web.xml --> which would not be created in simple project without archetype

Also, it will create an index.jsp in src/main/java/webapp folder
  Index.jsp has the text "Hello World!" initially.
  
The pom.xml will still be created as that is standard for Maven projects

=================================
POM.XML - ADD JERSEY AND JACKSON
=================================
NOTE: In the properties section, use the required/latest jersey, servlet and jdk versions
NOTE: The two dependencies of jersey-container-servlet and jersey-media-json-jackson download many more to maven local repository

      <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <version.jdk>1.8</version.jdk>  <!-- 1.7 for JDK 7 -->
        <version.jersey>2.25.1</version.jersey>
        <version.servlet.api>3.1.0</version.servlet.api>  <!-- use 3.0.1 for Tomcat 7 or Java EE 6 (i.e. Glassfish 3.x) -->
      </properties>
    
        <!-- Jersey -->       
        <dependency>
            <groupId>org.glassfish.jersey.containers</groupId>
            <artifactId>jersey-container-servlet</artifactId>
            <version>${version.jersey}</version>
        </dependency>
        
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-json-jackson</artifactId>
            <version>${version.jersey}</version>
        </dependency>

============================================
PROGRAMS
============================================

-------------------------
PACKAGE
-------------------------
Create a new package com.gm.scratch1.rest
--> Under the project BasicRestJJ

-------------------------
THE CUSTOMER OBJECT
-------------------------
package com.gm.scratch1.rest;

public class Customer 
{
	String name;
	int id;
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
}

-------------------------
THE REST SERVICE
CustomerService.java
-------------------------

package com.gm.scratch1.rest;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Response;

@Path("/createjson")
public class CustomerService
{
    @GET
    @Path("/get")
    @Produces("application/json")
    public Customer getCustomerInJSON(@QueryParam("username") String name, @QueryParam("id") int id)
    {
        Customer cust = new Customer();
        cust.setName(name);
        cust.setId(id);
        return cust;
    }
    
    @POST
    @Path("/post")
    @Consumes("application/json")
    public Response createCustomerJSON(Customer customer)
    {
        String result = "Saved Customer : " + customer;
        System.out.println(customer.getName());
        return Response.status(200).entity(customer).build();
        
    }
    
}

-------------------------
WEB.XML
-------------------------
NOTE: No need to reference POJOTransformation thing
NOTE: Ensure the package that contains the programs appears in it 

<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                             http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" version="3.1">

    <servlet>
        <servlet-name>Basic Rest with Jersey and Jackson</servlet-name>
        <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>     
        <init-param>
             <param-name>jersey.config.server.provider.packages</param-name>
             <param-value>com.gm.scratch1.rest</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>Basic Rest with Jersey and Jackson</servlet-name>
        <url-pattern>/rest/*</url-pattern>
    </servlet-mapping>

</web-app>

-----------------------
POJOMappingFeature
-----------------------
In Jersey 1.x POJOMappingFeature parameter had to be set to true to use POJO marshal/unmarshal.
In Jersey 2.x it is not required
See https://jersey.java.net/documentation/latest/user-guide.html

- Old style web.xml example 1
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns="http://java.sun.com/xml/ns/j2ee" 
xmlns:web="http://xmlns.jcp.org/xml/ns/javaee" 
xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee%20
http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd%20
http://java.sun.com/xml/ns/j2ee%20
http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd" id="WebApp_ID" version="2.4">
  <display-name>Restful Web Application</display-name>
  <servlet>
  <servlet-name>jersey-serlvet</servlet-name>
  <servlet-class>
    com.sun.jersey.spi.container.servlet.ServletContainer
  </servlet-class>
  <init-param>
    <param-name>com.sun.jersey.api.json.POJOMappingFeature</param-name>
    <param-value>true</param-value>
  </init-param>
  <init-param>
    <param-name>com.sun.jersey.config.property.packages</param-name>
    <param-value>com.gm.scratch1.rest</param-value>
  </init-param>
  <load-on-startup>1</load-on-startup>
 </servlet>
 <servlet-mapping>
   <servlet-name>jersey-serlvet</servlet-name>
   <url-pattern>/rest/*</url-pattern>
 </servlet-mapping>
</web-app>

- Old style web.xml example 2
<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
    <display-name>RestExample</display-name>
    <servlet>
        <servlet-name>Jersey REST Service</servlet-name>
        <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
        <init-param>
            <param-name>jersey.config.server.provider.packages</param-name>
            <param-value>com.gm.scratch1.rest</param-value>
        </init-param>
	  <init-param>
             <param-name>com.sun.jersey.api.json.POJOMappingFeature</param-name>
             <param-value>true</param-value>
          </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>Jersey REST Service</servlet-name>
        <url-pattern>/rest/*</url-pattern>
    </servlet-mapping>
</web-app>

========================================
BUILD PATH
========================================
'Add Library' - JDK 1.8 (not JRE 1.5 or other non-JDK)
'Add External Jar' - Tomcat/lib/javax.servlet-api-3.1.0.jar

========================================
BUILD
========================================
Right click project
Run as 
Maven install

--> Find the war file C:\Data\PROGRAMMING\JAVA\Maven\workspace-scratch1\BasicRestJJ\target\BasicRestJJ.war

========================================
DEPLOY
========================================
Copy the above war file to C:\Opt\Tomcat\v8.0.32\webapps
Wait for Tomcat to automatically deploy it or restart Tomcat if necessary

========================================
RUN
========================================

--------
GET
--------
http://localhost:8080/BasicRestJJ/rest/createjson/get?username=user1&id=1

Output on screen:
{"name":"user1","id":1}

--------
POST - WITH A CALLING WRAPPER PROGRAM (probably using Postman could be easier)
--------

TBD
http://stackoverflow.com/questions/30853658/jersey-2-x-does-not-contain-webresource-and-resource-class-what-can-i-use-inste
http://stackoverflow.com/questions/32042944/upgrade-from-jersey-client-1-9-to-jersey-client-2-8

package com.gm.scratch1.rest;

// Jersey 1.x
//import com.sun.jersey.api.client.Client;
//import com.sun.jersey.api.client.ClientResponse;
//import com.sun.jersey.api.client.WebResource;

// Jersey 2.x
import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Entity;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.Response;

public class PostExample  // unmarshals json input
{
    public static void main(String args[])
    {
        try
        {
            String input = "{\"name\": \"user1_POST\",\"id\": 99}";

            //Jersey 1.x
            //Client client = Client.create();
            Client client = ClientBuilder.newClient();

            //Jersey 1.x
            //WebResource resource = client.resource("http://localhost:8080/BasicRestJJ/rest/createjson/post");
            WebTarget target = client.target("http://localhost:8080/BasicRestJJ/rest/createjson/post");

            //Jersey 1.x
            //ClientResponse response = resource.type("application/json").post(ClientResponse.class, input);
            Response response = target.request().post(Entity.json(input));
            
            
            if (response.getStatus() != 200) {
                throw new RuntimeException("Failed : HTTP error code : "
                 + response.getStatus());
             }
      
            //Jersey 1.x
            //Customer customer = response.getEntity(Customer.class);
            Customer customer = response.readEntity(Customer.class);
            System.out.println("Customer Name : "+customer.getName());
            System.out.println("Customer ID   : "+customer.getId());

        } catch (Exception e)
        {
            e.printStackTrace();
        }
    }
}
