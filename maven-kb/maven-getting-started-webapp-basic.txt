=======================================
MAVEN - GETTING STARTED - WEBAPP BASIC
=======================================

Good one (very basic) - http://crunchify.com/how-to-create-dynamic-web-project-using-maven-in-eclipse/
--> followed this one for this basic practice

Just about creating a Maven project in eclipse - http://www.tech-recipes.com/rx/39279/create-a-new-maven-project-in-eclipse/
Command line Maven (mvn commands) - https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html
Spring framework using Maven - https://spring.io/guides/gs/maven/

=================================
WEBAPP MAVEN PROJECT IN ECLIPSE (similar to dynamic web project in non-maven Eclipse)
=================================
Good one (very basic) - http://crunchify.com/how-to-create-dynamic-web-project-using-maven-in-eclipse/

---------------------------
Create new Maven project
---------------------------
Choose archetype 'org.apache.maven.archetypes' --> 'maven-archetype-webapp'

This will create the WEB-INF and web.xml --> which would not be created in simple project without archetype

Also, it will create an index.jsp in src/main/java/webapp folder
  Index.jsp has the text "Hello World!" initially.
  
The pom.xml will still be created as that is standard for Maven projects

------------------------
MISSING DIRECTORIES
------------------------
The src/main/java directory is not automatically created
Create it manually 
  Create manually on the workstation using o/s explorer
  OR, right click on the project --> add --> new source folder --> choose the folder
  
  The folder should now show under 'Java Resources' in project explorer.
  Also, it should show up in the src/main ... tree in project explorer.

------------------------
CREATE PACKAGE
------------------------
The package mentioned during project creation does not seem to be automatically available.
Right click on the project --> new --> package
In the upcoming page:
Source folder shows as gm-rest-example1/src/main/resources --> change it to gm-rest-example1/src/main/java
Enter package name like gm.rest.example1  (where gm.rest is the group id)

----------------------------------
Add servlet jar file to build path
----------------------------------
You may get an error for this index.jsp 
  The superclass “javax.servlet.http.HttpServlet” was not found on the Java Build Path ...
  --> To fix that, you can either add the servlet jar file from Tomcat or other 
      downloaded from Maven or other repository to build path
  -->  OR add the following lines in the pom.xml file:
       This will make Maven download the jar file and keep it in its own download location (C:\users\username\.m2\repository...)
       and reference it under Libraries --> Maven Dependencies in the project heirarchy view in Eclipse
       
      <dependency>
    	<groupId>javax.servlet</groupId>
    	<artifactId>javax.servlet-api</artifactId>
    	<version>3.1.0</version>
    	</dependency>

-----------------------------------
Do a 'clean install' 
-----------------------------------
NOTE: This is to get Maven download all dependencies for this project (dependencies are in pom.xml)

Right click on the project in the project explorer
Choose Run As --> Maven Build
and mention 'clean install' in the 'Goals' field

----------------------------------------
Run the webapp in Tomcat within Eclipse (the index.jsp is the most basic webapp)
----------------------------------------
Right click on the project --> choose 'run as' --> Run on server --> Manually define a server --> Apache --> Tomcat v8.0 server 
  --> Next button --> Tomcat installation directory --> choose it (example C:\Opt\Tomcat\v8.0.32) --> choose the right JRE
  --> Finish
  
This will bring up a local instance of Tomcat and a browser within Eclipse.
Also, it runs the project URL automatically: http://localhost:8080/mavenWebappArchetype/index.jsp
--> which will display "Hello World!"

Note: This URL is also accessible from other external browsers on the laptop.

To stop the local instance of Tomcat, in the browser view, in the bottom portion, 
  choose the Tomcat server --> right click --> Stop
  



