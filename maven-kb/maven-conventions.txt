=====================================
MAVEN CONVENTIONS
=====================================

====================
Directory Layout
====================
Also see: http://web.archive.org/web/20110723201350/http://cvs.peopleware.be/training/maven/maven2/standardDirLayout.html

https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html
src/main/java	Application/Library sources (will be 'COMPILED' into target/classes)
src/main/resources	Application/Library resources (will be 'copied' into target/classes)
src/main/resources-filtered	Application/Library resources which are filtered. (Starting with Maven 3.4.0, not yet released.)
src/main/filters	Resource filter files
src/main/webapp	Web application sources
src/test/java	Test sources
src/test/resources	Test resources
src/test/resources-filtered	Test resources which are filtered by default. (Starting with Maven 3.4.0, not yet released.)
src/test/filters	Test resource filter files
src/it	Integration Tests (primarily for plugins)
src/assembly	Assembly descriptors
src/site	Site
LICENSE.txt	Project's license
NOTICE.txt	Notices and attributions required by libraries that the project depends on
README.txt	Project's readme
At the top level files descriptive of the project: a pom.xml file In addition, there are textual documents meant for the user 
to be able to read immediately on receiving the source: README.txt, LICENSE.txt, etc.

There are just two subdirectories of this structure: src and target. The only other directories that would be expected here are 
metadata like CVS, .git or .svn, and any subprojects in a multiproject build (each of which would be laid out as above).

The target directory is used to house all output of the build.

The src directory contains all of the source material for building the project, its site and so on. It contains a 
subdirectory for each type: main for the main build artifact, test for the unit test code and resources, site and so on.

Within artifact producing source directories (ie. main and test), there is one directory for the language java 
(under which the normal package hierarchy exists), and one for resources (the structure which is copied to the target classpath given the default resource definition).

If there are other contributing sources to the artifact build, they would be under other subdirectories: 
for example src/main/antlr would contain Antlr grammar definition files.

====================
Sources vs Resources
====================
http://stackoverflow.com/questions/19145697/maven-sources-vs-resources
The src/main/java contains your java source codes. that is, your java packages, *.java files.
The src/main/resources contains "resources" file of your project. e.g. properties file, configuration files (xml, ini, conf....) 
they are in classpath of your project.
Usually the compiled sources (*.class files) and those resources would be in target/classes.
Your web app sources (e.g. Jsp/jspx, js, html...) should go to src/main/webapp

https://www.jetbrains.com/help/idea/2016.1/resource-files.html
Resources include properties files, images, DTDs, and XML files. These files are located under the Classpath of your application, 
and are usually loaded from the Classpath by means of the following methods:

ResourceBundle.getBundle() for the property files and resource bundles
loadResourceAsStream() for icons and other files
When building an application, IntelliJ IDEA copies all resources into the output directory, preserving the directory structure 
of the resources, relative to the source path. The following file types are recognized as resources by default:

.properties
.xml
.html
.dtd
.tld
.gif
.png
.jpeg
.jpg
The pattern of recognized resource files is represented as a regular expression and configurable in the Compiler dialog.

Using Resource pattern setting, you can add your own file extensions and create custom list of resources.
