=================================================
MAVEN - INCLUDE LOCAL JAR TO COMPILE THE PROJECT
=================================================

Maven may not recognize the local-jars even if you include them in build-path.
During program edits, it recognizes the jars, but not during compile/install.

https://developer.atlassian.com/docs/faq/troubleshooting/compilation-failure-package-does-not-exist
http://stackoverflow.com/questions/2831335/maven-compile-fails-because-i-have-a-non-maven-jar

http://stackoverflow.com/questions/18414812/how-to-add-my-external-jar-file-to-class-path --> in pom.xml
http://stackoverflow.com/questions/2455316/package-does-not-exist --> in build.xml
http://stackoverflow.com/questions/15305679/maven-and-eclipse-a-reliable-way-to-add-non-maven-or-external-jars-to-a-project --> in eclipse
http://stackoverflow.com/questions/4955635/how-to-add-local-jar-files-in-maven-project

Adding a local repository and a jar from that: http://stackoverflow.com/questions/2229757/maven-add-a-dependency-to-a-jar-by-relative-path

-----------------------------------------
A possible solution (that seemed to work) - more methods in more sections below
-----------------------------------------
https://developer.atlassian.com/docs/faq/troubleshooting/compilation-failure-package-does-not-exist
http://stackoverflow.com/questions/2831335/maven-compile-fails-because-i-have-a-non-maven-jar

Create a folder in the workstation as a 'local repository' (say /tmp/java/ownjars)
Copy your jars to that folder
Add that folder as the repo in pom.xml of the project
Add the dependency of the necessary jars in pom.xml of the project

POM.XML
-------
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.gm.oracle</groupId>
	<artifactId>com-gm-oracle-services</artifactId>
	<packaging>war</packaging>
	<version>0.0.1-SNAPSHOT</version>
	<name>com-gm-oracle-services Maven Webapp</name>
	<url>http://maven.apache.org</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<version.jdk>1.8</version.jdk>  <!-- 1.7 for JDK 7 -->
		<version.jersey>2.25.1</version.jersey>
		<version.servlet.api>3.1.0</version.servlet.api>  <!-- use 3.0.1 for Tomcat 7 or Java EE 6 (i.e. Glassfish 3.x) -->
	</properties>
	
	<repositories>
	<!-- Local repository -->
    <repository>
        <id>ownjars</id>
        <name>ownjars</name>
        <url>file:/tmp/java/ownjars</url>
    </repository>
    </repositories>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>3.8.1</version>
			<scope>test</scope>
		</dependency>
 
        <!-- Local jar -->
		<dependency>
			<groupId>com.gm.oracle</groupId>
			<artifactId>com-gm-oracle-datahandlers</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>

		<!-- Local jar -->
		<dependency>
			<groupId>com.gm.utils</groupId>
			<artifactId>com-gm-utils-java</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>
		
		<!-- Jersey -->
		<dependency>
			<groupId>org.glassfish.jersey.containers</groupId>
			<artifactId>jersey-container-servlet</artifactId>
			<version>${version.jersey}</version>
		</dependency>

		<!-- Jackson -->
		<dependency> <groupId>org.glassfish.jersey.media</groupId> <artifactId>jersey-media-json-jackson</artifactId> 
			<version>${version.jersey}</version> 
	    </dependency>

		<!-- Moxy -->
		<dependency>
			<groupId>org.glassfish.jersey.media</groupId>
			<artifactId>jersey-media-moxy</artifactId>
			<version>${version.jersey}</version>
		</dependency>

	</dependencies>

	<build>
		<finalName>com-gm-oracle-services</finalName>
	</build>
</project>

===============================
THE RIGHT WAY - one (see two also)
===============================
An local jar has to be added to Maven repository under C:\Users\username\.m2 ....
That is achieved by mvn install:file command - which can be simulated by Eclipse also.

------------------------------------------------------
MVN command: (Eclipse alternative shown in next para)
------------------------------------------------------
http://stackoverflow.com/questions/1164043/maven-how-to-include-jars-which-are-not-available-in-reps-into-a-j2ee-project
mvn install:install-file -Dfile=[FILE_PATH] \
-DgroupId=[GROUP] -DartifactId=[ARTIFACT] -Dversion=[VERS] \ 
-Dpackaging=jar -DlocalRepositoryPath=[REPO_DIR]

------------------------------------------------------
Eclipse steps: (alternative to mvn command)
------------------------------------------------------
http://stackoverflow.com/questions/2209950/how-to-tell-m2eclipse-to-install-jar-file-as-a-maven-dependency
First, get that jar and save it somewhere on your file system. 
Then, in Eclipse, from the top bar, Run > Run Configurations... 
--> then right-click on Maven Build and configure the New_configuration freshly created:
Select an arbitrary Base directory (actually this does not matter, just give something)
Fill the Goals with install:install-file
Add parameters for each required parameters, without the -D prefix
file as Parameter name and /path/to/file as Value and so on for groupId, artifactId, version and packaging.
Example: (in Run-Configuration adding a new configuration)
Name - Install-File
Base directory - C:\Data\PROGRAMMING\JAVA\Maven-local-repo (or something else - just placeholder)
Goals - install:install-file
Parameters:
name - file, value - C:\Data\PROGRAMMING\JAVA\OwnJars\gm-mysql-dh-0.0.1-SNAPSHOT.jar
name - groupId, value - gm.mysql
name - artifactId, value - gm-mysql-dh
name - version, value - 0.0.1-SNAPSHOT
name - packaging, value - jar

Then, click 'Run'

Following are the messages on the work Eclipse does after this.
[INFO] Scanning for projects...
[INFO] 
[INFO] Using the builder org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder with a thread count of 1
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Maven Stub Project (No POM) 1
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-install-plugin:2.4:install-file (default-cli) @ standalone-pom ---
[INFO] Installing C:\Data\PROGRAMMING\JAVA\OwnJars\gm-mysql-dh-0.0.1-SNAPSHOT.jar to C:\Users\myusername\.m2\repository\gm\mysql\gm-mysql-dh\0.0.1-SNAPSHOT\gm-mysql-dh-0.0.1-SNAPSHOT.jar
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 0.875 s
[INFO] Finished at: 2016-05-30T18:37:29+05:30
[INFO] Final Memory: 7M/245M
[INFO] ------------------------------------------------------------------------

-------------------
POM.XML DEPENDENCY
-------------------
Add the following dependency into pom.xml

    <dependency>
        <groupId>gm.mysql</groupId>
        <artifactId>gm-mysql-dh</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <scope>compile</scope>
    </dependency>

When you export the project as war then you will see the jar you wanted to add in the 'target' web-inf/lib folder.

===============================
THE RIGHT WAY - TWO
===============================
http://www.mkyong.com/maven/how-to-include-library-manully-into-maven-local-repository/
1. mvn install (see 1a also)
Download the “kaptcha“, extract it and copy the kaptcha-version.jar to somewhere else, for example, c drive. Issue following command :

Bash
mvn install:install-file -Dfile=c:\kaptcha-{version}.jar -DgroupId=com.google.code 
-DartifactId=kaptcha -Dversion={version} -Dpackaging=jar

1a. In Eclipse with Maven plugin that it has
Virtualbox SDK download and install jar in maven/eclipse
  In Eclipse: 
  Run --> Run Configurations --> install:install-file -Dfile=C:\DOWNLOADS\Virtualbox-SDK\VirtualBoxSDK-5.0.20-106931\sdk\bindings\webservice\java\jax-ws\vboxjws.jar  -DgroupId=org.virtualbox -DartifactId=vboxjws -Dversion=5.0.20 -Dpackaging=jar
  Then, pom.xml:
  <dependency>
    	<groupId>org.virtualbox</groupId>
    	<artifactId>vboxjws</artifactId>
    	<version>5.0.20</version>
	</dependency>

2. pom.xml
After installed, just declares the kaptcha coordinate in pom.xml.

Markup
  <dependency>
      <groupId>com.google.code</groupId>
      <artifactId>kaptcha</artifactId>
      <version>2.3</version>
 </dependency>
