==========================================
LDAP CLIENT CONFIGURATION ON UBUNTU
==========================================
Use this - https://www.digitalocean.com/community/tutorials/how-to-authenticate-client-computers-using-ldap-on-an-ubuntu-12-04-vps
This is convoluted - https://help.ubuntu.com/community/LDAPClientAuthentication

==========================
CLIENT MACHINE - BUILD
==========================
Create a Vagrant VM from bento/ubuntu-14.04
- Or, otherwise create an Ubuntu machine

=================================
PREPARE LDAP SERVER and CLIENT
=================================
- SERVER
Open port 389 (OpenLdap) or other of the LDAP server to world.  (refer to unix docs on how to open port)
Note down the LDAP server name, IP, admin user DN and password

- CLIENT
Create an entry in the /etc/hosts of the client machine to point to LDAP server IP.
Install ldap-utils on client - apt-get install ldap-utils
Verify if client can talk to server using ldapsearch:
$ ldapsearch -h ldap_hostname_or_ip -D cn=Manager,dc=example,dc=com -w Manager_password -b dc=example,dc=com

=====================
INSTALL LDAP CLIENT 
=====================
On client machine

--------------------------
Update the apt metadata
--------------------------
# apt-get update

--------------------------
Install
--------------------------
During the following install, a questionnaire will pop up - be ready for providing the details  (read first and then do)
# apt-get install libpam-ldap nscd

--------------------------
Questionnaire popup
--------------------------
You will be asked a variety of questions similar to the those asked when you were installing the server components.

- LDAP server Uniform Resource Identifier: ldap://LDAP-server-IP-Address
        NOTE: Change the initial string from "ldapi:///" to "ldap://" before inputing your server's information

- Distinguished name of the search base: dc=example,dc=com (or other)
        NOTE: This phpldapadmin is if you are using phpldapadmin - otherwise, find from LDAP server config files
        This should match the value you put in your LDAP server's /etc/phpldapadmin/config.php file.
        Search for: " 'server','base',array " within the file.
        Our example was "dc=test,dc=com"
        
- LDAP version to use: 3

- Make local root Database admin: Yes

- Does the LDAP database require login? No

- LDAP account for root: cn=Manager,dc=example,dc=com  (or other)
        NOTE: This phpldapadmin is if you are using phpldapadmin - otherwise, find from LDAP server config files
        This should also match the value in your /etc/phpldapadmin/config.php.
        Search for: " 'login','bind_id' " within the file
        Our example was "cn=admin,dc=test,dc=com"
        
- LDAP root account password: Your-LDAP-root-password (oracle or other)

--> If you make a mistake and need to change a value, you can go through the menu again by issuing this command:
# dpkg-reconfigure ldap-auth-config


Install will continue with messages similar to the following:
Get:1 http://us.archive.ubuntu.com/ubuntu/ trusty/main auth-client-config all 0.9ubuntu1 [15.4 kB]
Get:2 http://us.archive.ubuntu.com/ubuntu/ trusty/main libpam-ldap amd64 184-8.5ubuntu3 [46.0 kB]
Get:3 http://us.archive.ubuntu.com/ubuntu/ trusty-updates/main libnss-ldap amd64 264-2.2ubuntu4.14.04.2 [57.0 kB]
Get:4 http://us.archive.ubuntu.com/ubuntu/ trusty/main ldap-auth-client all 0.5.3 [2,760 B]
Get:5 http://us.archive.ubuntu.com/ubuntu/ trusty/main ldap-auth-config all 0.5.3 [9,434 B]
Get:6 http://us.archive.ubuntu.com/ubuntu/ trusty-updates/universe nscd amd64 2.19-0ubuntu6.9 [72.1 kB]
Fetched 203 kB in 0s (262 kB/s)
Preconfiguring packages ...
Selecting previously unselected package auth-client-config.
(Reading database ... 47939 files and directories currently installed.)
Preparing to unpack .../auth-client-config_0.9ubuntu1_all.deb ...
Unpacking auth-client-config (0.9ubuntu1) ...
Selecting previously unselected package libpam-ldap:amd64.
Preparing to unpack .../libpam-ldap_184-8.5ubuntu3_amd64.deb ...
Unpacking libpam-ldap:amd64 (184-8.5ubuntu3) ...
Selecting previously unselected package libnss-ldap:amd64.
Preparing to unpack .../libnss-ldap_264-2.2ubuntu4.14.04.2_amd64.deb ...
Unpacking libnss-ldap:amd64 (264-2.2ubuntu4.14.04.2) ...
Selecting previously unselected package ldap-auth-client.
Preparing to unpack .../ldap-auth-client_0.5.3_all.deb ...
Unpacking ldap-auth-client (0.5.3) ...
Processing triggers for man-db (2.6.7.1-1ubuntu1) ...
Processing triggers for ureadahead (0.100.0-16) ...
ureadahead will be reprofiled on next reboot
Setting up auth-client-config (0.9ubuntu1) ...
Selecting previously unselected package ldap-auth-config.
(Reading database ... 48020 files and directories currently installed.)
Preparing to unpack .../ldap-auth-config_0.5.3_all.deb ...
Unpacking ldap-auth-config (0.5.3) ...
Selecting previously unselected package nscd.
Preparing to unpack .../nscd_2.19-0ubuntu6.9_amd64.deb ...
Unpacking nscd (2.19-0ubuntu6.9) ...
Processing triggers for ureadahead (0.100.0-16) ...
Processing triggers for man-db (2.6.7.1-1ubuntu1) ...
Setting up libnss-ldap:amd64 (264-2.2ubuntu4.14.04.2) ...
update-rc.d: warning: default start runlevel arguments (2 3 4 5) do not match libnss-ldap Default-Start values (none)
Setting up nscd (2.19-0ubuntu6.9) ...
 * Starting Name Service Cache Daemon nscd
   ...done.
Processing triggers for ureadahead (0.100.0-16) ...
Setting up ldap-auth-client (0.5.3) ...
Setting up ldap-auth-config (0.5.3) ...
Setting up libpam-ldap:amd64 (184-8.5ubuntu3) ...

======================
CONFIGURE CLIENT
======================

--------------------
/etc/nsswitch.conf
--------------------
--> Add 'ldap' in front of compat for passwd, group and shadow

passwd:         ldap compat
group:          ldap compat
shadow:         ldap compat

--------------------
PAM
--------------------
Edit file /etc/pam.d/common-session 

Add this line:
session required    pam_mkhomedir.so skel=/etc/skel umask=0022

--------------------
RESTART CLIENT
--------------------
# /etc/init.d/nscd restart
 * Restarting Name Service Cache Daemon nscd
   ...done.

=======
VERIFY
=======
- Search 'passwd' entry of an LDAP user
# getent passwd usera
usera:*:15001:10000:usera user:/home/usera:/bin/bash
(where usera is an LDAP user created already in the ldap server)

- Logon as the LDAP user
As this was a Vagrant VM, create a user 'junk' just to test this.
# useradd junk
# su - junk
$ id
uid=15005(junk) gid=15005(junk) groups=15005(junk)
$ su - usera
Password: (oracle or other)
groups: cannot find name for group ID 10000  --> this is an error as a group 10000 was assigned in LDAP, but no such group in LDAP
$ id
uid=15001(usera) gid=10000 groups=10000
$ pwd
/home/usera

========================================================================================================================
APPENDIX
https://www.digitalocean.com/community/tutorials/how-to-authenticate-client-computers-using-ldap-on-an-ubuntu-12-04-vps
========================================================================================================================
How To Authenticate Client Computers Using LDAP on an Ubuntu 12.04 VPS
PostedOctober 2, 2013 253.1k views SECURITY PHP NETWORKING UBUNTU
Introduction

LDAP, or Lightweight Directory Access Protocol, is one way of keeping authentication information in a single centralized location. In a previous article, we discussed how to set up an LDAP server on an Ubuntu 12.04 VPS. This explained the actual server configuration.

In this article, we will discuss how to configure a client machine to remotely authenticate with that server for various services.

To complete this project, you will need an Ubuntu 12.04 server configured as the LDAP server. Look at the link to the previous guide if you haven't done so already. You will also need another Ubuntu 12.04 droplet to act as the client machine.

Install Client Packages
On the client machine, you will needs to install a few packages to make authentication function correctly with an LDAP server.

You can install them from the default Ubuntu repositories with the following commands:

sudo apt-get update
sudo apt-get install libpam-ldap nscd
You will be asked a variety of questions similar to the those asked when you were installing the server components.

LDAP server Uniform Resource Identifier: ldap://LDAP-server-IP-Address

Change the initial string from "ldapi:///" to "ldap://" before inputing your server's information
Distinguished name of the search base:

This should match the value you put in your LDAP server's /etc/phpldapadmin/config.php file.
Search for: " 'server','base',array " within the file.
Our example was "dc=test,dc=com"
LDAP version to use: 3

Make local root Database admin: Yes

Does the LDAP database require login? No

LDAP account for root:

This should also match the value in your /etc/phpldapadmin/config.php.
Search for: " 'login','bind_id' " within the file
Our example was "cn=admin,dc=test,dc=com"
LDAP root account password: Your-LDAP-root-password

If you make a mistake and need to change a value, you can go through the menu again by issuing this command:

sudo dpkg-reconfigure ldap-auth-config
Configure Client Software
We have to adjust a few files to tell our authentication files that they can look to our LDAP server for authentication information.

First, edit the /etc/nsswitch.conf file. This will allow us to specify that the LDAP credentials should be modified when users issue authentication change commands.

sudo nano /etc/nsswitch.conf
The three lines we are interested in are the "passwd", "group", and "shadow" definitions. Modify them to look like this:

passwd:         ldap compat
group:          ldap compat
shadow:         ldap compat
Next, we will add a value to our PAM configuration.

PAM, or Pluggable Authentication Modules, is a system that connects applications that can provide authentication to applications that require authentication.

PAM is already implemented on most computers, and works behind the scenes without needing user interaction. When we installed and configured our LDAP PAM module, most of the needed information was added to the configuration files.

Edit the /etc/pam.d/common-session file:

sudo nano /etc/pam.d/common-session
Add a line to the bottom of the configuration that reads:

session required    pam_mkhomedir.so skel=/etc/skel umask=0022
This will create a home directory on the client machine when an LDAP user logs in who does not have a home directory.

We have to restart a service for these changes to be implemented:

sudo /etc/init.d/nscd restart
Permissions
During the LDAP server configuration, we created a group called "admin". This was not chosen at random. It coincides with the "admin" group that is created by default on Ubuntu machines.

The LDAP users that you added to the "admin" group will have access to the sudo command.

This is because we have a line that gives members of the "admin" group sudo access within the /etc/sudoers file. Edit the file by issuing this command:

sudo visudo
There is a line that reads:

%admin ALL=(ALL) ALL
Entries that begin with a percentage sign (%) specify a group instead of a user. If you wish to disable this functionality, or only grant specific users this functionality, comment out this line:

#%admin ALL=(ALL) ALL
Log In as an LDAP User
We have now configured our client machine enough to be able to log in as one of our LDAP users. This user does not have to exist on the client machine.

In a new terminal window (it is best to keep your original terminal window logged in, in case of a configuration mistake), ssh into the client machine using an LDAP user's credentials:

ssh LDAP_user@LDAP_client_IP_Address
You should be able to log in as if your user had been created locally. Issue the print working directory command:

pwd
You should see that the home directory you selected for your user on the LDAP server is being used on this machine. It has been created on-demand to serve the LDAP user.

If you log out and log in with a different LDAP user, you can see that there will be two home directory entries:

ls /home
user1  user2
If your user is part of the "admin" group and you didn't disable the ability in the previous section, you will have normal sudo access, otherwise, you will not.

If you issue the passwd command to change your password, you can see that it will be modifying your LDAP credentials:

passwd
Enter login(LDAP) password:
Restricting Access by Group
If you only want members of certain groups to be able to log into this specific machine, you can configure that restriction within the PAM files.

Edit the following file with root privileges:

sudo nano /etc/pam.d/common-auth
At the bottom, we will specify that PAM should look at the security access file to see how to restrict user logins. Add this to the bottom:

auth    required    pam_access.so
Save and close the file.

The file that PAM references for security information when that setting is configured is at /etc/security/access.conf. Open this file now, with root privileges:

sudo nano /etc/security/access.conf
We need to add a rule to the end of the file.

The dash (-) at the beginning of the line means this is a restriction. From the first colon (:) to the next colon, we specify who this rule applies to.

We specify that this applies to all users except root and the group "admin". Groups are given within parentheses.

From the second colon to the end of the line, we will specify under which circumstances the rule should apply. In our case, the restriction will apply in all circumstances but local logins.

-:ALL EXCEPT root (admin):ALL EXCEPT LOCAL
This will allow us to restrict logins to the "admin" group. We can add other groups or change the group.

This will also allow us to log in through the "console access" button on the DigitalOcean console if we somehow lock ourselves out of SSH.

Keep in mind that this will apply to all users, not just LDAP users. So any users you create on the client machine will need to be a member of one of the specified groups.

Conclusion
You should now be able to authenticate multiple computers using a centralized LDAP server. Your LDAP users will be allowed to use any of the machines you configure in this way, as long as they have the appropriate login credentials.

This can prevent your user information from becoming dispersed, duplicated, and unmanageable. When the number of users accessing your servers or projects is increasing, and the number of machines is also growing, LDAP authentication can be a huge help.

By Justin Ellingwood


==============================
APPENDIX - https://help.ubuntu.com/community/LDAPClientAuthentication
==============================

LDAPClientAuthentication
Contents

Introduction
LDAP Client Authentication
Automatically create home folders
Assign local groups to users
Finalize
LDAP Host Access Authorization
pam_check_host_attr (limited)
pam_filter (limited)
nss_base_<map> (recommended)
Troubleshooting
Credits
Introduction
This page is intended for anyone who wants to enable an Ubuntu client to authenticate on an existing OpenLDAP server. For more details on the server installation part see OpenLDAPServer.

If you want Kerberos as well for single-sign-on (likely), see SingleSignOn. This configuration has been tested with Ubuntu 10.04 LTS and works transparently with pam_krb5.

For authenticating on a Sun Java Enterprise System Directory Server, please consult the SunLDAPClientAuthentication page.

For authenticating using a Mac OS X Leopard Server, consult the OSXLDAPClientAuthentication page.

LDAP Client Authentication
On Ubuntu 7.10 systems and newer use the auth-client-config and pam-auth-update tools to modify all necessary pam and nsswitch configuration files (see Credits and AuthClientConfig). Also, you are recommended to install nscd in order to avoid some of the issues described in the Troubleshooting section at the end of this document. The meta-package called ldap-auth-client will install all required packages for an ldap client (auth-client-config, ldap-auth-config, libnss-ldap and libpam-ldap):


sudo apt-get install ldap-auth-client nscd
Set up /etc/nsswitch.conf to use ldap lookups by running:


sudo auth-client-config -t nss -p lac_ldap
On 10.04 systems this lac_ldap configuration can be found in /etc/auth-client-config/profile.d/ldap-auth-config and comes with the ldap-auth-config package. On older systems you could create it like this:


[lac_ldap]
nss_passwd=passwd: files ldap
nss_group=group: files ldap
nss_shadow=shadow: files ldap
nss_netgroup=netgroup: nis
Automatically create home folders
In order to get the pam_mkhomedir module working you could create a file like /usr/share/pam-configs/my_mkhomedir:


Name: activate mkhomedir
Default: yes
Priority: 900
Session-Type: Additional
Session:
        required                        pam_mkhomedir.so umask=0022 skel=/etc/skel
and activate it by running pam-auth-update. This roughly equals editing /etc/pam.d/common-session by hand and adding the following line before any pam_ldap and pam_krb5 settings:


session required        pam_mkhomedir.so umask=0022 skel=/etc/skel
Assign local groups to users
To assign local groups to a domain (ldap) user do the following edit /etc/security/group.conf and add something like the following to it (log in as a local user and run the groups command to verify what to add): 


*;*;*;Al0000-2400;audio,cdrom,dialout,floppy
In order to get the pam_group module working you could create a file like /usr/share/pam-configs/my_groups:


Name: activate /etc/security/group.conf
Default: yes
Priority: 900
Auth-Type: Primary
Auth:
        required                        pam_group.so use_first_pass
and activate it by running pam-auth-update. This roughly equals editing /etc/pam.d/common-auth by hand and adding the following line before any pam_ldap and pam_krb5 settings:


auth    required     pam_group.so use_first_pass
You should now have local groups showing up for users logging in via gdm and ssh and can verify this by executing id or groups.

Finalize
Just to make sure everything works, run the following:


pam-auth-update
/etc/init.d/nscd restart
LDAP Host Access Authorization
Host based authentication allows you to restrict who can log into a machine that uses LDAP for authentication. Basically you add an attribute to each LDAP user's record that includes hostnames that they are allowed to log in to. Each client system then checks this field against its own hostname and either allows or denies login based upon the attribute field.

There are different methods to enforce host-based authentication:

using pam_check_host_attr authentication in /etc/ldap.conf

using pam_filter authentication in /etc/ldap.conf

using nss_base_<map> authentication in /etc/ldap.conf (recommended)

pam_check_host_attr (limited)
Warning: depending on your configuration, host-based authentication will always succeed. For additional information see /usr/share/doc/libpam-ldap/ and man nss_ldap (does not support the pam_filter configuration).

Using the pam_check_host_attr directive to enforce host authentication has the effect that users are explicitly informed they are not permitted to access the host with an error message: Access denied for this host. 

Libpam-ldap requires that you use the host attribute. The package documentation includes a schema which provides this attribute, located at /etc/ldap/schema/ldapns.schema, which can be added to slapd.conf if needed. You can populate that attribute creating an LDIF file your_file.ldif:


dn: uid=user_to_change,ou=Users,dc=example,dc=com
changetype: modify
add: host
host: thehostname
The hostname should match the output from the hostname command. When in doubt, check the slapd logs on the server. Make the change using:


ldapmodify -H ldaps://ldapserver -D "cn=admin,dc=example,dc=com" -x -W -f your_file.ldif
On the client side, simply modify /etc/ldap.conf (or other appropriate configuration file as defined in pam.d) to include the line:


pam_check_host_attr yes
pam_filter (limited)
Warning: depending on your configuration, host-based authentication will always succeed. For additional information see /usr/share/doc/libpam-ldap/ and man nss_ldap (does not support the pam_filter configuration).

Using the pam_filter directive in /etc/ldap.conf it is possible to enforce PAM to only access accounts with attributes of our choosing. Users who are not permitted access to the host will receive no error, instead PAM responds as if they have entered an incorrect password. 

If we want to use the host attribute, we can add the schema located at /etc/ldap/schema/ldapns.schema and create a filter which matches thehostname or * in /etc/ldap.conf:


pam_filter |(host=thehostname)(host=\*)
Another example using GOsa's accessTo and trustModel attributes would look like the following:


pam_filter |(&(accessTo=thehostname)(trustModel=byhost))(trustModel=fullaccess)
nss_base_<map> (recommended)
Using the nss_base_<map> directives in /etc/ldap.conf has all the advantages as using the pam_filter directive, but should also work with nss_ldap.

If we want to use the host attribute, we can add the schema located at /etc/ldap/schema/ldapns.schema and create filters which match thehostname or * in /etc/ldap.conf:


nss_base_passwd ou=Users,dc=example,dc=com?one?|(host=thehostname)(host=\*)
nss_base_shadow ou=Users,dc=example,dc=com?one?|(host=thehostname)(host=\*)
nss_base_group  ou=Groups,dc=example,dc=com?one
Troubleshooting
If you have lookup failures on some accounts using libpam-ldap, try installing libpam-ldapd instead (to be configured via /etc/nslcd.conf).

If you get setreuid errors like sudo: setreuid(ROOT_UID, user_uid): Operation not permitted, then have a look at this bug report for libcrypt. A simple workaround is installing nscd.

Information about why pam_filter will NOT always work, while nss_base_<map> should, can be found in this forum

You can verify your LDAP information using the following commands

$ id
$ id YOURUSERNAME (will not show additional groups)

$ getent passwd
$ getent shadow
$ getent group
An old bug alert on this site states: make sure /etc/libnss-ldap.conf and /etc/pam_ldap.conf has bind_policy soft. If not, you risk running into udev-issues at boot-time.

Credits
some of the information used in this document was found on this page.

pam(7) manpage
nss_ldap(5) manpage
auth-client-config(8) manpage
pam-auth-update(8) manpage
An alternate directory server authentication HOWTO KRB5+LDAP Authentication
